<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Typed Out</title>
    <link href="https://bje.id.au/blog/atom.xml" rel="self" />
    <link href="https://bje.id.au/blog" />
    <id>https://bje.id.au/blog/atom.xml</id>
    <author>
        <name>Byron Ellacott</name>
        <email></email>
    </author>
    <updated>2020-01-15T00:00:00Z</updated>
    <entry>
    <title>The TRS-20 - apply power here</title>
    <link href="https://bje.id.au/blog/posts/trs20/005-power-up.html" />
    <id>https://bje.id.au/blog/posts/trs20/005-power-up.html</id>
    <published>2020-01-15T00:00:00Z</published>
    <updated>2020-01-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>With my plan for a perfboard in hand, I finally broke out the soldering iron and started assembling. The board has a socket for an oscillator, a socket for the CPU, and IDC connectors for both 50-pin and 10-pin links. This is a <em>lot</em> of little wires to cut, strip, and solder. Let’s see how it goes.</p>
<!--more-->
<h2 id="data-address-and-more">Data, address, and more</h2>
<figure>
<img src="/images/z80-basic-wiring.jpg" alt="" /><figcaption>Marge! We need more red, blue, yellow, white, red, and black hookup wire!</figcaption>
</figure>
<p>The first pass at it all involved 8 white wires for data, 16 yellow wires for address, some black and red for power lines, and not quite enough blue left for all the signals. There’s a capacitor that snuck its way on the board, since it’ll be noisy enough as it is. The soldering went as well as one might expect, you can see a few wires where the insulation has melted apart, a few suspiciously large blobs of solder, but everything’s clean and bridge-free.</p>
<p>The set of signals I chose to hook up with the blue I had are the CPU’s inputs: the four interrupts, reset, wait, and bus request. Wiring these seven signals high, and the eight data signals low, will put the CPU into a NOP loop through the low 8 bits of address space.</p>
<figure>
<img src="/images/z80-low-address-probe.png" alt="" /><figcaption>A0 to A4 showing doubling of frequency at each bit. Just ignore the noise…</figcaption>
</figure>
<p>Using my ghetto fixed logic probe, the main thing I see is a smattering of chaos. The CPU has not been told otherwise, and so it is refreshing DRAM it doesn’t have. Each DRAM refresh sets some address lines and leaves others floating. The result on the probe is that I can find spans in which the low order address lines show a satisfying binary counting pattern, but the high order lines barely show structure at all.</p>
<figure>
<img src="/images/z80-basic-board.jpg" alt="" /><figcaption>Eight address lines into the probe, seven signal lines tied high, eight data lines tied low.</figcaption>
</figure>
<h2 id="wiring-up-the-rest">Wiring up the rest</h2>
<p>That’s okay. It’s time to wire up the remaining signals anyway. A quick trip to the local Jaycar (shout out to the Jaycar Aspley folks who’re super helpful every time I come in!) and I’m $9 down, but two packs of jumper wire up, and I can finish off the soldering. Except for the USART stuff to the 10-pin header, which I’ll leave for when I need it.</p>
<p>This time around, I’ll want to see what’s going on with the CPU status pins. I know that it should only be doing opcode fetches and refreshes, which means M1, MREQ, and RD are the only interesting signals. Connecting four pins of the probe to A0 through A3, and the other four pins to M1, MREQ, RD, and PHI lets me take a peek at what’s going on.</p>
<figure>
<img src="/images/z80-rfsh-probe.png" alt="" /><figcaption>Ah logic probe, well worth what I paid for you. I think I forgot to include you in my costings, though…</figcaption>
</figure>
<p>This image shows <em>exactly</em> what I expect. When M1 and RD are high but MREQ is low, the CPU is in a refresh cycle. The address lines will make some sort of sense, but not the sense I’m looking for. When M1. RD, and MREQ are all low, the CPU is fetching an opcode. The address lines are behaving as they should at these times.</p>
<figure>
<img src="/images/z180%20timing%20diagram.png" alt="" /><figcaption>This timing diagram is from PS014005-0817, the Z80180 MPU product specification document, page 31.</figcaption>
</figure>
<p>The synchronisation of signals matches the data sheet. Very shortly after Ф rises for T1, M1 falls. So shortly, in fact, my cheap logic probe records them as happening simultaneously, which means they are less than 41.7ns apart. At 10MHz, the data sheet promises these two events happen no slower than 60ns apart, and that looks to hold true at 1MHz as well. T1’s falling edge MREQ and RD both falling, no more than 50ns after. These three events coincide at a finer resolution than my probe. With T3’s rise, M1 rises. With T3’s fall, MREQ and RD rise.</p>
<figure>
<img src="/images/z180%20one%20cycle.png" alt="" /><figcaption>Zoomed in on one opcode fetch machine cycle.</figcaption>
</figure>
<p>Since the CPU is only executing NOP instructions, all registers are at their RESET defaults. This includes the DMA/WAIT Control (DCNTL) register, which sets bits MWI0 and MWI1 at RESET, inserting three wait states to memory access cycles. The Refresh Control (RCR) register is also in its RESET state, which enables DRAM refresh, inserts one wait state in the refresh cycle to take it to three clocks, and requires one refresh cycle every 10 clock cycles. In practice, this means that there’s a memory refresh cycle between almost every opcode fetch cycle - every 7th fetch cycle skips a refresh cycle. In the image above, you can see a refresh cycle beginning. M1 and RD are high, MREQ is low.</p>
<p>The Z8018x Family MPU User Manual (UM005004-0918) has a table on page 287 that indicates a memory refresh cycle has M1, IORQ, RD, WR, HALT, and BUSACK high, and has MREQ and RFSH low. No other operating modes have MREQ active without either RD or WR active, that is <span class="math inline">\(\overline{RFSH} = \overline{MREQ} \land \lnot(\overline{RD} \lor \overline{WR})\)</span>. I don’t need to expose the RFSH line to know when a refresh cycle is active, and my boot ROM will disable memory refresh very early on in any case, so there’s no need to expose this signal.</p>
<p>One oddity does stand out. The system clock on PHI is running at 1MHz, the same as the oscillator. However, the Z8018x User Manual claims that “[T]he frequency of this output is equal to one-half that of the crystal or input clock frequency.” (UM005004-0918, pp. 7) This same claim is repeated in the Z80180 MPU Product Specification (PS014005-0817, pp. 9) for the CLOCK signal. This isn’t a problem, exactly, save that I have an 18MHz oscillator on back order, and that’ll be far too fast for my 10MHz rated chip.</p>
<p>Nevertheless, my chip starts up and looks on the surface to be behaving correctly. And perhaps more surprisingly, my soldering looks to have been done correctly!</p>
<h2 id="spending-is-a-habit">Spending is a habit</h2>
<table>
<caption>I warned myself about a Jaycar spree…</caption>
<colgroup>
<col style="width: 34%" />
<col style="width: 6%" />
<col style="width: 58%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Item</th>
<th style="text-align: left;">Price</th>
<th style="text-align: left;">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">SM1024</td>
<td style="text-align: left;">$2.40</td>
<td style="text-align: left;">8-way DIP switch</td>
</tr>
<tr class="even">
<td style="text-align: left;">WH3009</td>
<td style="text-align: left;">$24.95</td>
<td style="text-align: left;">8 spools of 25m hookup wire</td>
</tr>
<tr class="odd">
<td style="text-align: left;">PB8819</td>
<td style="text-align: left;">$9.95</td>
<td style="text-align: left;">Breadboard w/ power supply and jumpers</td>
</tr>
<tr class="even">
<td style="text-align: left;">RC5360</td>
<td style="text-align: left;">$1.60</td>
<td style="text-align: left;">10x 100nF ceramic cap, through hole</td>
</tr>
<tr class="odd">
<td style="text-align: left;">RR0596</td>
<td style="text-align: left;">$1.65</td>
<td style="text-align: left;">24x 10kΩ ±1% 0.5W resistor</td>
</tr>
<tr class="even">
<td style="text-align: left;">PP1116</td>
<td style="text-align: left;">$0.95</td>
<td style="text-align: left;">1x 50-pin IDC header</td>
</tr>
<tr class="odd">
<td style="text-align: left;">PP1100</td>
<td style="text-align: left;">$1.90</td>
<td style="text-align: left;">2x 10-pin IDC header</td>
</tr>
<tr class="even">
<td style="text-align: left;">HP9540</td>
<td style="text-align: left;">$4.50</td>
<td style="text-align: left;">Stripboard, 95x75mm</td>
</tr>
<tr class="odd">
<td style="text-align: left;">WH3032</td>
<td style="text-align: left;">$9.00</td>
<td style="text-align: left;">2x breadboard jumper wire</td>
</tr>
</tbody>
</table>
<p>I picked up 8 spools of hookup wire. It’s wider than the jumper wire, and multi-core, so I haven’t used any yet. It’s great stuff for crimping into connectors and the like, but not so fun for soldering with - I expect it to last for years, but probably not see much use on this project. Towards the end of my $400 budget I will sort out what’s been used on the project and what hasn’t, so I can assess costs better.</p>
<p>The ceramic caps are handy for decoupling ICs: you can see one embedded in the processor board. The resistors are for pulling signals high or low. One 50-pin IDC header is now attached to a small section of stripboard, with male headers soldered beneath, as an IDC-to-DIP connector. It’s tricky, soldering to both sides of one-sided stripboard. The DIP switch was bought with dreams of toggling data lines high or low, but I’m not sure I’ll ever want to do that.</p>
<p>My PC104 stackable headers have failed to clear customs. I’ve received a refund, though sadly it looks like my refund doesn’t include the GST I paid for, so I’m out a dollar or so out of pocket, and I’ll need to re-order them sooner or later. Also from Aliexpress, I bought the logic probe from the last post for $12.93, but forgot to list it in any post, and have since also bought a MAX II CPLD minimum system board for $11.56 so I can experiment with a CPLD without soldering a hundred little wires, and some brass spacers for $5.20 for the PC/104 stack.</p>
<p>I think I can claim an extra mark on the CPU progress meter, since I have a working CPU.</p>
<table style="width:86%;">
<caption>Project status update</caption>
<colgroup>
<col style="width: 21%" />
<col style="width: 8%" />
<col style="width: 10%" />
<col style="width: 13%" />
<col style="width: 10%" />
<col style="width: 11%" />
<col style="width: 11%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Budget</th>
<th style="text-align: center;">CPU</th>
<th style="text-align: center;">Power</th>
<th style="text-align: center;">Keyboard</th>
<th style="text-align: center;">Video</th>
<th style="text-align: center;">Memory</th>
<th style="text-align: center;">Debug</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">$209.35 of $400</td>
<td style="text-align: center;">██──</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">██──</td>
</tr>
</tbody>
</table>]]></summary>
</entry>
<entry>
    <title>The TRS-20 - arrivals from China</title>
    <link href="https://bje.id.au/blog/posts/trs20/004-china-cargo.html" />
    <id>https://bje.id.au/blog/posts/trs20/004-china-cargo.html</id>
    <published>2020-01-01T00:00:00Z</published>
    <updated>2020-01-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Ordering a stack of parts from China always brings to my mind the idea of space-based mining operations loading packages of extracted minerals onto a linear accelerator, resulting in a line of packages drifting towards a rendezvous point to be collected on arrival. Since AliExpress is a brokerage for individual traders, placing an order like mine means almost everything comes in its own separate package.</p>
<!--more-->
<p>The space rocks have been arriving at my Lagrange point since the start of December. My STM32F401 “black pill” board and LCD panel arrived first, followed by my Z180 processor and the PLCC extractor tool. Just before Christmas, my practice SMD kits and logic analyzer arrived, along with a brand new order from Digi-Key detailed below, followed shortly by a USB Blaster for programming a CPLD. The CPLD and some PLCC sockets are awaiting collection from my Lagrange point now.</p>
<p>Sadly, one space rock has been stuck in Sydney awaiting clearance since November. Unfortunately it will probably never arrive. Fortunately, though, it’s the PC/104 headers, which I can go without while I wait for the delivery window to expire, get a refund, and order more.</p>
<h2 id="damaged-goods">Damaged goods</h2>
<p>Ordering from AliExpress is usually a mixed bag of results, and this set of orders is no different. The LCD panel has a lovely big impact fracture in it, obsuring ten characters. Despite this, it works, and I have the black pill STM32 driving it happily - all I/O ports on the STM32F4 are 5V tolerant, so there’s no problem controlling the 5V LCD panel from the 3.3V STM32. A refund should be processed shortly, but I don’t think I’ll bother ordering another - I’d need to order the I²C adapter as well, and it’ll take a month to arrive. I’ll work around the damage.</p>
<figure>
<img src="/images/lcd-cracked.jpg" alt="" /><figcaption>Taking a photo of a backlit LCD panel is surprisingly difficult.</figcaption>
</figure>
<p>The logic analyzer powered up its LEDs just fine, but wasn’t recognised as a USB device. It’s easy to take apart, but scanning over the circuit board showed no obvious problems. This device is quite simple, with a Cypress CY7C68013A USB controller with integrated 8051 μC at its heart. The μC is supported by a 2K EEPROM and a 24MHz crystal, and the usual scattering of resistors and such. With no obvious problems on the board, I took a peek at the USB socket. The ground pin was missing, which is a problem and a surprise - despite this missing pin, the board was powering up, so it was finding a return path somewhere.</p>
<figure>
<img src="/images/logic-analyzer.jpg" alt="" /><figcaption>This photo shows the part markings, with a hint of ghetto repair.</figcaption>
</figure>
<p>A $5 part is worth taking the risk on for a repair, so I took the shield off the USB socket and found the ground pin was present but not inserted correctly. It’s possible the board was getting an intermittent connection from it. I straightened the pin out a little and the board was recognised immediately, and could analyze my I²C link to the LCD panel. Of course without the shield and its solder connections, the remaining stub of USB socket quickly broke off, so I lopped the head off the supplied USB cable and soldered it directly to the board, which you can see at the bottom of the image, beside the exposed FR4 substrate where I ripped the pad right off removing the shield. Hot glue will provide sufficient strain relief for this device.</p>
<h2 id="soldering-with-fire">Soldering with fire</h2>
<p>My SMD practice kits also arrived, so I took a moment to solder two QFP 44s, some SOT-23s, 0612 resistor arrays, and even some 0402 resistors. I tried drag soldering, heating solder paste with the iron, and heating paste with a butane hot air torch. The image below shows the hot air soldering on the QFP on the left, and the SOIC and SOT-23s at the top. Heating paste with an iron is the QFP on the right, and the SOIC/SOTs at the bottom. The drag soldering was an attept to correct the hot air QFP having been lifted slightly off the pads on one side, and since I dont have any flux that isn’t inside a solder wire or in the paste, it went very poorly. You can see a big ol’ solder bridge between the 4th and 5th pins from the bottom.</p>
<figure>
<img src="/images/qfp-solder-kit.jpg" alt="" /><figcaption>I don’t even know what these chips do. They’re probably not functional though, since they’re in a cheap practice kit.</figcaption>
</figure>
<p>The hot air soldering did a very neat job on the SOICs and the SOT-23s, and a reasonably neat job on the 0402s. I’ll still call 0603 my lower limit, but if I ever need a 0402 in a pinch I’m confident I could manage. The 0612 arrays (marked as 0606 on the board, but definitely not square parts) were surprisingly fiddly, but also went on okay. I singed the board in two places trying to fiddle with the arrays, though.</p>
<p>I’ll definitely use the hot air approach for most SMD work. The solder paste heated with an iron leaves a lot of mess behind that I suspect may corrode the board or cause bridges down the line, and I don’t see any reason to use flux paste and try again on the drag soldering given how quick and effective the hot air soldering was. The fact that one row of legs didn’t make contact means I’ll try again on the second practice board and see if it was insufficient paste, bent pins, or a lack of pressure on the chip, but I expect that a cheap butane torch is enough to run with QFPs and even stuff with thermal pads.</p>
<h2 id="christmas-shopping">Christmas shopping</h2>
<p>Meanwhile, I placed and received an order from Digi-Key, and I got a refund for the broken LCD panel. This puts me $5.32 up, and $66.28 down, or $124 through my $400 budget, with no operational circuits or PCBs yet. With Jaycar putting a hot air rework station on special, I need to pay close attention to my spending habits, lest I wind up $400 in with a bunch of loose parts and nothing else.</p>
<p>The Digi-Key order gives me a handful of 74 logic ICs from the HC and AHCT families - NAND gates, D flip-flops, multivibrators, and in/out shift registers. These logic ICs will allow my STM32F4 to link up to the system bus. With a 1MHz oscillator the processor will be running at 500KHz, giving me a whopping 2ms to establish /WAIT and process signals. The STM has 64Kb of SRAM, it can deliver 16Kb to the Z180 comfortably, and 16Kb of its 256Kb of Flash can serve as a ROM.</p>
<table>
<colgroup>
<col style="width: 34%" />
<col style="width: 6%" />
<col style="width: 58%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Item</th>
<th style="text-align: left;">Price</th>
<th style="text-align: left;">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">AE11164-ND</td>
<td style="text-align: left;">$6.24</td>
<td style="text-align: left;">2x right-angle 50-pin IDC header</td>
</tr>
<tr class="even">
<td style="text-align: left;">ED3044-5-ND</td>
<td style="text-align: left;">$1.20</td>
<td style="text-align: left;">5x 8-pin IC sockets, for oscillators</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2015-CY7C1049CV33-12ZSXA-ND</td>
<td style="text-align: left;">$6.96</td>
<td style="text-align: left;">2x 4Mbit 12ns SRAM, TSOP-II, total 1Mbyte</td>
</tr>
<tr class="even">
<td style="text-align: left;">MCP2221A-I/P-ND</td>
<td style="text-align: left;">$3.42</td>
<td style="text-align: left;">USB to I2C/UART IC, for serial comms</td>
</tr>
<tr class="odd">
<td style="text-align: left;">296-36142-5-ND</td>
<td style="text-align: left;">$4.30</td>
<td style="text-align: left;">5x 74HC595 shift registers (DIP), debug board</td>
</tr>
<tr class="even">
<td style="text-align: left;">296-8251-5-ND</td>
<td style="text-align: left;">$3.60</td>
<td style="text-align: left;">5x 74HC165 shift registers (DIP), debug board</td>
</tr>
<tr class="odd">
<td style="text-align: left;">296-4632-5-ND</td>
<td style="text-align: left;">$5.89</td>
<td style="text-align: left;">10x 74AHCT00 NAND gates (DIP), debug board</td>
</tr>
<tr class="even">
<td style="text-align: left;">296-4772-5-ND</td>
<td style="text-align: left;">$5.89</td>
<td style="text-align: left;">10x 74ACHT74 D-type flip flops (DIP), debug board</td>
</tr>
<tr class="odd">
<td style="text-align: left;">296-41620-5-ND</td>
<td style="text-align: left;">$4.50</td>
<td style="text-align: left;">5x 74AHCT123 multivibrators (DIP), debug board</td>
</tr>
<tr class="even">
<td style="text-align: left;">CKN12306-ND</td>
<td style="text-align: left;">$1.50</td>
<td style="text-align: left;">10x through-hole tactile switches, debug board</td>
</tr>
<tr class="odd">
<td style="text-align: left;">CKN12219-1-ND</td>
<td style="text-align: left;">$1.56</td>
<td style="text-align: left;">10x SMD tactile switches</td>
</tr>
<tr class="even">
<td style="text-align: left;">H3DDH-5018G-ND</td>
<td style="text-align: left;">$5.60</td>
<td style="text-align: left;">450mm 50-way IDC ribbon cable</td>
</tr>
<tr class="odd">
<td style="text-align: left;">H3DDH-5006G-ND</td>
<td style="text-align: left;">$3.99</td>
<td style="text-align: left;">150mm 50-way IDC ribbon cable</td>
</tr>
<tr class="even">
<td style="text-align: left;">110-MXO45HS-3C-1M000000-ND</td>
<td style="text-align: left;">$3.26</td>
<td style="text-align: left;">1MHz oscillator, processor board</td>
</tr>
<tr class="odd">
<td style="text-align: left;">AE10059-ND</td>
<td style="text-align: left;">$2.34</td>
<td style="text-align: left;">68-pin PLCC socket, processor board</td>
</tr>
</tbody>
</table>
<p>The next task is to bust out the soldering iron to get some wires hooked up on the perf board. I can’t put it off forever: if I wait much longer I may as well have just ordered a PCB instead.</p>
<table style="width:86%;">
<caption>Project status update</caption>
<colgroup>
<col style="width: 21%" />
<col style="width: 8%" />
<col style="width: 10%" />
<col style="width: 13%" />
<col style="width: 10%" />
<col style="width: 11%" />
<col style="width: 11%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Budget</th>
<th style="text-align: center;">CPU</th>
<th style="text-align: center;">Power</th>
<th style="text-align: center;">Keyboard</th>
<th style="text-align: center;">Video</th>
<th style="text-align: center;">Memory</th>
<th style="text-align: center;">Debug</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">$124.09 of $400</td>
<td style="text-align: center;">█───</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">██──</td>
</tr>
</tbody>
</table>]]></summary>
</entry>
<entry>
    <title>The TRS-20 - make it run</title>
    <link href="https://bje.id.au/blog/posts/trs20/003-basic-board.html" />
    <id>https://bje.id.au/blog/posts/trs20/003-basic-board.html</id>
    <published>2019-12-30T00:00:00Z</published>
    <updated>2019-12-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>My Z8018010VSC processor is here!</p>
<p>Also arrived is the LCD screen, the STM32F401CC dev board, and most of the other junk I ordered. This post explores what else I need to prepare to be able to make something operational.</p>
<!--more-->
<p>The minimum circuit for the Z180 will need a power source and a clock. With only these things supplied, the processor will be shouting addresses into the void and receiving opcodes to execute from the ether, so tying some of the address lines to LEDs, the data lines to 00H (aka NOP), and other input lines high will let me confirm the processor is running.</p>
<p>The PLCC sockets are through-hole parts, allowing me to simply use perf board to get some kind of initial circuit up and running. Power can be supplied by header pins fed from a 5V breadboard supply, and a cheap oscillator in a DIP socket gets me a clock source quickly.</p>
<p>With clock and power sorted out, it’s time to look at the signals. The PLCC chip has 68 pins, of which 5 are supply pins (four Vss, one Vcc) and two are clock input pins (EXTAL and XTAL, only EXTAL needed with an oscillator). This leaves 61 signals and two power lines to sort out. TEST must be left floating, and RFSH is pointless without DRAM, which leaves me with 61 lines to assign. I can use a 10-pin header for the serial signals and a 50-pin IDC header for everything else, with one signal to discard. I’ve chosen to leave out the E secondary bus signal, which is active only when bus requests are active.</p>
<figure>
<img src="/images/trs20-basic-circuit.png" alt="" /><figcaption>The basic circuit wires the processor to a 50-pin IDC socket and an oscillator.</figcaption>
</figure>
<p>Soldering 60+ wires to perfboard is a fiddly task, as I need to take care to solder wires on in an order that doesn’t leave me melting one wire while trying to solder another. I also don’t want to wind up with something looking like the banner image of this post. This means carefully inspecting the processor’s pin diagram and arranging the order of signals on the IDC connector to avoid crossing the wires. Selecting a non-interfering wire order now will have later benefits should I get a PCB made up, as I can stick to routing signals on the top layer and have a broad ground plane.</p>
<figure>
<img src="/images/trs20-basic-circuit-wiring.png" alt="" /><figcaption>It’s a work of art. Not, you know, great art. More the sort of art that goes on a parent’s fridge for a few months, then quietly thrown out when the child has forgotten it.</figcaption>
</figure>
<p>I need to run supply and ground on the bottom layer in a few places, and there’s a short stint on the bottom layer for DREQ0, but otherwise everything is on the top layer. This particular circuit is more of a wiring plan for a breadboard than anything else, as I think it would not be a good idea to run traces underneath an oscillator, for example.</p>
<p>The Z80180 cannot run slower than 0.5MHz, by the datasheet. The processor’s clock runs at one-half of the external oscillator’s rate, so a 1MHz oscillator is the slowest that I can use. However, if I want to communicate over the USART, I need a clock rate that can work with the USART’s baud rate generator divider pipeline. This pipeline first divides my external clock by two to get the system clock. This can then be divided by a power of two from 1 to 64, then by 10 or 30, and then by 16 or 64. If I want to run my ASCI at 9600 baud, I need a clock that’s at least 16 x 10 x 2 x 9600 = 3.072MHz. Regrettably, DigiKey don’t want to sell me a through-hole oscillator at that speed, nor at 9.216MHz, or in fact any of the speeds that divide into a common baud rate, except for 6.144MHz and 18.432MHz. The latter clocks my processor at 9.216MHz and allows me to operate at baud rates from 57600 down to 300.</p>
<p>Alternatively, an external clock that’s less than or equal to the system clock divided by 40 can be used, divided by 16 or 64. A 1MHz oscillator is a 500KHz system clock, requiring an external clock slower than 12.5KHz. Since I have to divide it by 16, I’d need a 4.8KHz oscillator, which I’m pretty sure don’t exist. I’m calling this option a dead end - I don’t want to have a large BOM just to be generating a USART-compatible clock when I can use a system clock that’s suitable.</p>
<figure>
<img src="/images/z8x180-asci-clock.png" alt="" /><figcaption>This little flow chart is responsible for a lot of time staring at oscillator product lists. Source: Z8018x MPU user manual, page 141.</figcaption>
</figure>
<p>So: two oscillators. One to run the processor at its lowest speed of 500KHz with no serial access, and one to run it near its top speed at 9.216MHz. At low speeds, don’t expect serial comms to work: it’s flashing lights and I/O decoders all the way. At the higher speed, I should be able to run a USART link at up to 57600 baud. I can also consider a third oscillator at 3.57MHz, which runs the processor at 1.785MHz, as close as I’m likely to get to the 1.774MHz of the original TRS-80 Model I. To have both a TRS-80 Model I and USART at the same time would require an external clock source for the USART. An MCP2221 USB to USART bridge can output various clocks, with a stack of glue to divide down to a useful speed, or the CPLD may be able to generate a useful clock signal.</p>
<p>The 50-way IDC connector needs 2x25 holes, and is 2.54mm x 25 + 7.62 + 0.3 = 71.42mm wide. Jaycar’s got a 29x50 hole perf board that comfortably fits everything with plenty of space for wires. And a handful of other stuff: some sockets for logic chips, a larger 24x67 perfboard, and a 50-pin IDC header. Jaycar also gave me a $10 loyalty reward, bringing the price of this little splurge down to a more manageable level.</p>
<table>
<caption>Parts from Jaycar</caption>
<colgroup>
<col style="width: 34%" />
<col style="width: 6%" />
<col style="width: 58%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Item</th>
<th style="text-align: left;">Price</th>
<th style="text-align: left;">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">PI6501</td>
<td style="text-align: left;">$1.35</td>
<td style="text-align: left;">14-pin IC sockets, for debug board</td>
</tr>
<tr class="even">
<td style="text-align: left;">PI6502</td>
<td style="text-align: left;">$0.90</td>
<td style="text-align: left;">16-pin IC sockets, for debug board</td>
</tr>
<tr class="odd">
<td style="text-align: left;">HP9554</td>
<td style="text-align: left;">$8.95</td>
<td style="text-align: left;">24x67 hole perf board, debug board</td>
</tr>
<tr class="even">
<td style="text-align: left;">HP9552</td>
<td style="text-align: left;">$6.95</td>
<td style="text-align: left;">29x50 hole perf board, as initial CPU board</td>
</tr>
<tr class="odd">
<td style="text-align: left;">PP1116</td>
<td style="text-align: left;">$0.95</td>
<td style="text-align: left;">50-pin IDC header</td>
</tr>
</tbody>
</table>
<p>This board is beyond bare-bones: the CPU won’t run correctly with just this board. There’s a handful of inputs that need to be tied high or low, including /RESET. With everything except E exposed, however, it’s fairly straightforward to plug into a breadboard to get something going, and to subsequently build a companion board with the STM32F4 to get some traction on doing more interesting things with the CPU.</p>
<table style="width:86%;">
<caption>Project status update</caption>
<colgroup>
<col style="width: 21%" />
<col style="width: 8%" />
<col style="width: 10%" />
<col style="width: 13%" />
<col style="width: 10%" />
<col style="width: 11%" />
<col style="width: 11%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Budget</th>
<th style="text-align: center;">CPU</th>
<th style="text-align: center;">Power</th>
<th style="text-align: center;">Keyboard</th>
<th style="text-align: center;">Video</th>
<th style="text-align: center;">Memory</th>
<th style="text-align: center;">Debug</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">$63.13 of $400</td>
<td style="text-align: center;">█───</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">█───</td>
</tr>
</tbody>
</table>]]></summary>
</entry>
<entry>
    <title>Advent of Code, Day 2</title>
    <link href="https://bje.id.au/blog/posts/2019-12-03-advent.html" />
    <id>https://bje.id.au/blog/posts/2019-12-03-advent.html</id>
    <published>2019-12-03T00:00:00Z</published>
    <updated>2019-12-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>The <a href="aoc">Advent of Code</a>, day 2, involves an interpreted integer computer, with three opcodes. The first task is to interpret the (self-modifying) program and find the output value - this is straightforward. The second task is to find two initial memory values that produce a fixed output value. This task is the subject of today’s post.</p>
<p><!--more--></p>
<p>This post is presented as literate Haskell, but since I don’t provide you with the source of the site you’ll have to cut and paste it bit by bit to run it. Maybe some day I’ll improve on that, but not today.</p>
<p>No imports, no language extensions, let’s keep this one simple.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell literate"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></span></code></pre></div>
<p>Each participant gets a unique puzzle input. Mine has been cut and pasted into the program code below, because reading a text file isn’t the interesting part of the problem.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell literate"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a><span class="ot">puzzle ::</span> [<span class="dt">Int</span>]</span>
<span id="cb2-2"><a href="#cb2-2"></a>puzzle <span class="ot">=</span></span>
<span id="cb2-3"><a href="#cb2-3"></a>    [  <span class="dv">1</span>, <span class="dv">12</span>,  <span class="dv">2</span>,  <span class="dv">3</span>,  <span class="dv">1</span>,  <span class="dv">1</span>,  <span class="dv">2</span>,  <span class="dv">3</span>,  <span class="dv">1</span>,  <span class="dv">3</span></span>
<span id="cb2-4"><a href="#cb2-4"></a>    ,  <span class="dv">4</span>,  <span class="dv">3</span>,  <span class="dv">1</span>,  <span class="dv">5</span>,  <span class="dv">0</span>,  <span class="dv">3</span>,  <span class="dv">2</span>,  <span class="dv">6</span>,  <span class="dv">1</span>, <span class="dv">19</span></span>
<span id="cb2-5"><a href="#cb2-5"></a>    ,  <span class="dv">1</span>, <span class="dv">19</span>,  <span class="dv">5</span>, <span class="dv">23</span>,  <span class="dv">2</span>, <span class="dv">10</span>, <span class="dv">23</span>, <span class="dv">27</span>,  <span class="dv">2</span>, <span class="dv">27</span></span>
<span id="cb2-6"><a href="#cb2-6"></a>    , <span class="dv">13</span>, <span class="dv">31</span>,  <span class="dv">1</span>, <span class="dv">10</span>, <span class="dv">31</span>, <span class="dv">35</span>,  <span class="dv">1</span>, <span class="dv">35</span>,  <span class="dv">9</span>, <span class="dv">39</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>    ,  <span class="dv">2</span>, <span class="dv">39</span>, <span class="dv">13</span>, <span class="dv">43</span>,  <span class="dv">1</span>, <span class="dv">43</span>,  <span class="dv">5</span>, <span class="dv">47</span>,  <span class="dv">1</span>, <span class="dv">47</span></span>
<span id="cb2-8"><a href="#cb2-8"></a>    ,  <span class="dv">6</span>, <span class="dv">51</span>,  <span class="dv">2</span>,  <span class="dv">6</span>, <span class="dv">51</span>, <span class="dv">55</span>,  <span class="dv">1</span>,  <span class="dv">5</span>, <span class="dv">55</span>, <span class="dv">59</span></span>
<span id="cb2-9"><a href="#cb2-9"></a>    ,  <span class="dv">2</span>,  <span class="dv">9</span>, <span class="dv">59</span>, <span class="dv">63</span>,  <span class="dv">2</span>,  <span class="dv">6</span>, <span class="dv">63</span>, <span class="dv">67</span>,  <span class="dv">1</span>, <span class="dv">13</span></span>
<span id="cb2-10"><a href="#cb2-10"></a>    , <span class="dv">67</span>, <span class="dv">71</span>,  <span class="dv">1</span>,  <span class="dv">9</span>, <span class="dv">71</span>, <span class="dv">75</span>,  <span class="dv">2</span>, <span class="dv">13</span>, <span class="dv">75</span>, <span class="dv">79</span></span>
<span id="cb2-11"><a href="#cb2-11"></a>    ,  <span class="dv">1</span>, <span class="dv">79</span>, <span class="dv">10</span>, <span class="dv">83</span>,  <span class="dv">2</span>, <span class="dv">83</span>,  <span class="dv">9</span>, <span class="dv">87</span>,  <span class="dv">1</span>,  <span class="dv">5</span></span>
<span id="cb2-12"><a href="#cb2-12"></a>    , <span class="dv">87</span>, <span class="dv">91</span>,  <span class="dv">2</span>, <span class="dv">91</span>,  <span class="dv">6</span>, <span class="dv">95</span>,  <span class="dv">2</span>, <span class="dv">13</span>, <span class="dv">95</span>, <span class="dv">99</span></span>
<span id="cb2-13"><a href="#cb2-13"></a>    ,  <span class="dv">1</span>, <span class="dv">99</span>,  <span class="dv">5</span>,<span class="dv">103</span>,  <span class="dv">1</span>,<span class="dv">103</span>,  <span class="dv">2</span>,<span class="dv">107</span>,  <span class="dv">1</span>,<span class="dv">107</span></span>
<span id="cb2-14"><a href="#cb2-14"></a>    , <span class="dv">10</span>,  <span class="dv">0</span>, <span class="dv">99</span>,  <span class="dv">2</span>,  <span class="dv">0</span>, <span class="dv">14</span>,  <span class="dv">0</span></span>
<span id="cb2-15"><a href="#cb2-15"></a>    ]</span></code></pre></div>
<p>Each number is a memory cell value. The interpreter has an instruction pointer initialised to zero, and recognises three opcodes: <code>1</code> is addition, <code>2</code> is multiplication, and <code>99</code> halts the program. The two numeric instructions have three arguments, each an indirect address. The first is the address of the left operand, the second the right operand, and the third the result address. In the puzzle input above, <code class="sourceCode haskell"><span class="dv">1</span>, <span class="dv">12</span>, <span class="dv">2</span>, <span class="dv">3</span></code> represents the addition opcode, which will add the contents of memory cells 12 and 2 and store the result in memory cell 3.</p>
<p>The second and third cells are the variables. The numbers above are the required values for the first part of the task - what value do you get in memory cell zero after executing this program. The second part of the task is to find values that mean the end result is the value 19690720 (the date of the first moon landing). The obvious approach is to try combinations until the right answer is output: my initial solution was to manually try a few numbers to see how the output varied with respect to the input, and derive a formula.</p>
<p>Hoever, this problem should be solvable directly, without using trial and error.</p>
<p>Each step of the program computes a new value for some memory cell using other memory cells. The trick with the second task is that two of the memory cells have no defined value: the final value in cell zero will be some expression of two variables. The solution, then, is to construct that expression directly, and solve it for the two variables.</p>
<p>The value to be computed will be an expression tree, where the leaves are either literal integers taken from program memory, or variables identified by their memory location. The branches are one of the two operations.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell literate"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">data</span> <span class="dt">Expr</span> <span class="ot">=</span> <span class="dt">Lit</span> <span class="dt">Int</span></span>
<span id="cb3-2"><a href="#cb3-2"></a>          <span class="op">|</span> <span class="dt">Var</span> <span class="dt">Int</span></span>
<span id="cb3-3"><a href="#cb3-3"></a>          <span class="op">|</span> <span class="dt">Add</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb3-4"><a href="#cb3-4"></a>          <span class="op">|</span> <span class="dt">Mul</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb3-5"><a href="#cb3-5"></a>          <span class="kw">deriving</span> <span class="dt">Show</span></span></code></pre></div>
<p>An expression can be evaluted to a result as long as it has no variables in it. This is where my code goes off the rails already: I use <code class="sourceCode haskell"><span class="fu">error</span></code> instead of putting the partiality into the type. I’ll forgive myself, and as the only reader of my blog, therefore all my readers also forgive me.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell literate"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="ot">evaluate ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb4-2"><a href="#cb4-2"></a>evaluate (<span class="dt">Lit</span> x)   <span class="ot">=</span> x</span>
<span id="cb4-3"><a href="#cb4-3"></a>evaluate (<span class="dt">Var</span> x)   <span class="ot">=</span> <span class="fu">error</span> <span class="st">&quot;evaluating variable&quot;</span></span>
<span id="cb4-4"><a href="#cb4-4"></a>evaluate (<span class="dt">Add</span> a b) <span class="ot">=</span> evaluate a <span class="op">+</span> evaluate b</span>
<span id="cb4-5"><a href="#cb4-5"></a>evaluate (<span class="dt">Mul</span> a b) <span class="ot">=</span> evaluate a <span class="op">*</span> evaluate b</span></code></pre></div>
<p>If there are variables, the expression can have those variables substituted for values.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell literate"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="ot">subst ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span></span>
<span id="cb5-2"><a href="#cb5-2"></a>subst var val (<span class="dt">Lit</span> x)   <span class="ot">=</span> <span class="dt">Lit</span> x</span>
<span id="cb5-3"><a href="#cb5-3"></a>subst var val (<span class="dt">Var</span> x)   <span class="ot">=</span> <span class="kw">if</span> var <span class="op">==</span> x <span class="kw">then</span> <span class="dt">Lit</span> val <span class="kw">else</span> <span class="dt">Var</span> x</span>
<span id="cb5-4"><a href="#cb5-4"></a>subst var val (<span class="dt">Add</span> a b) <span class="ot">=</span> <span class="dt">Add</span> (subst var val a) (subst var val b)</span>
<span id="cb5-5"><a href="#cb5-5"></a>subst var val (<span class="dt">Mul</span> a b) <span class="ot">=</span> <span class="dt">Mul</span> (subst var val a) (subst var val b)</span></code></pre></div>
<p>My code’s off-the-railness continues, with boolean blindness in the arguments, and recursion everywhere instead of catamorphisms. If you promise to stop being judgemental, I promise to stop being self-deprecating.</p>
<p>The first stage in solving the problem is to convert the initial memory footprint into an expression for the final value. The <code class="sourceCode haskell">mkExpr</code> function takes a list of variable positions and a program memory and produces a list of expression memory. The literal memory is first converted into expressions that are either a <code class="sourceCode haskell"><span class="dt">Lit</span></code> or a <code class="sourceCode haskell"><span class="dt">Var</span></code>, depending on the <code class="sourceCode haskell">vars</code> argument.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell literate"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1"></a><span class="ot">mkExpr ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> [<span class="dt">Expr</span>]</span>
<span id="cb6-2"><a href="#cb6-2"></a>mkExpr vars program <span class="ot">=</span></span>
<span id="cb6-3"><a href="#cb6-3"></a>    <span class="kw">let</span> cells <span class="ot">=</span> <span class="fu">zipWith</span> eval program [<span class="dv">0</span><span class="op">..</span>]        <span class="co">-- initial value</span></span>
<span id="cb6-4"><a href="#cb6-4"></a>        eval c i <span class="ot">=</span> <span class="kw">if</span> i <span class="ot">`elem`</span> vars <span class="kw">then</span> <span class="dt">Var</span> i <span class="kw">else</span> <span class="dt">Lit</span> c</span>
<span id="cb6-5"><a href="#cb6-5"></a>     <span class="kw">in</span> interpret cells <span class="dv">0</span></span></code></pre></div>
<p>The expression program is now interpreted, starting with an instruction pointer of zero.</p>
<p>The opcode to be executed must be evaluated first. Self-modifying code is fine, but code where the opcodes depend on variables is not - they’ll cause an <code class="sourceCode haskell"><span class="fu">error</span></code> in <code class="sourceCode haskell">evaluate</code>. Since opcodes that depend on variables would mean the majority of programs are invalid, I do not expect this result. Spoiler: the assumption was valid. Also valid was the assumption that the instruction pointer would never stray out of bounds.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell literate"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1"></a><span class="ot">interpret ::</span> [<span class="dt">Expr</span>] <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> [<span class="dt">Expr</span>]</span>
<span id="cb7-2"><a href="#cb7-2"></a>interpret cells ip <span class="ot">=</span> <span class="kw">case</span> evaluate (cells <span class="op">!!</span> ip) <span class="kw">of</span></span></code></pre></div>
<p>The two functional opcodes perform their respective operation, increase the instruction pointer, and tail-recursively continue interpretation. The halting opcode returns the current view of memory.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell literate"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1"></a>    <span class="dv">1</span>  <span class="ot">-&gt;</span> interpret (add cells ip) (ip <span class="op">+</span> <span class="dv">4</span>)</span>
<span id="cb8-2"><a href="#cb8-2"></a>    <span class="dv">2</span>  <span class="ot">-&gt;</span> interpret (mul cells ip) (ip <span class="op">+</span> <span class="dv">4</span>)</span>
<span id="cb8-3"><a href="#cb8-3"></a>    <span class="dv">99</span> <span class="ot">-&gt;</span> cells</span></code></pre></div>
<p>Any other opcode results in the dreaded <code class="sourceCode haskell"><span class="fu">error</span></code> again. This time with a little debug info, although the error never arose.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell literate"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1"></a>    _  <span class="ot">-&gt;</span> <span class="fu">error</span> <span class="op">$</span> <span class="st">&quot;invalid opcode &quot;</span> <span class="op">&lt;&gt;</span> <span class="fu">show</span> (cells <span class="op">!!</span> ip) <span class="op">&lt;&gt;</span> <span class="st">&quot; at &quot;</span> <span class="op">&lt;&gt;</span> <span class="fu">show</span> ip</span></code></pre></div>
<p>Performing an operation requires that the cell addresses can be evaluated. This is less of a firm assumption, as there would be many possible variable assignments that lead to functional but incorrect programs; for operands in particular programs would remain valid for all in-bounds addresses. Fortunately, this assumption also panned out.</p>
<p>The operand cells have their expressions retrieved. The destination cell is updated with a new expression using the two operands.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell literate"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1"></a>  <span class="kw">where</span></span>
<span id="cb10-2"><a href="#cb10-2"></a>    op f cells ip <span class="ot">=</span> <span class="kw">let</span> a <span class="ot">=</span> cells <span class="op">!!</span> (evaluate <span class="op">$</span> cells <span class="op">!!</span> (ip <span class="op">+</span> <span class="dv">1</span>))</span>
<span id="cb10-3"><a href="#cb10-3"></a>                        b <span class="ot">=</span> cells <span class="op">!!</span> (evaluate <span class="op">$</span> cells <span class="op">!!</span> (ip <span class="op">+</span> <span class="dv">2</span>))</span>
<span id="cb10-4"><a href="#cb10-4"></a>                        t <span class="ot">=</span> evaluate (cells <span class="op">!!</span> (ip <span class="op">+</span> <span class="dv">3</span>))</span>
<span id="cb10-5"><a href="#cb10-5"></a>                    <span class="kw">in</span> <span class="fu">take</span> t cells <span class="op">&lt;&gt;</span> (f a b <span class="op">:</span> <span class="fu">drop</span> (t <span class="op">+</span> <span class="dv">1</span>) cells)</span>
<span id="cb10-6"><a href="#cb10-6"></a>    add <span class="ot">=</span> op <span class="dt">Add</span></span>
<span id="cb10-7"><a href="#cb10-7"></a>    mul <span class="ot">=</span> op <span class="dt">Mul</span></span></code></pre></div>
<p>The example program from the task is <code class="sourceCode haskell">[<span class="dv">1</span>, <span class="dv">9</span>, <span class="dv">10</span>, <span class="dv">3</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">11</span>, <span class="dv">0</span>, <span class="dv">99</span>, <span class="dv">30</span>, <span class="dv">40</span>, <span class="dv">50</span>]</code>. With no variables defined, this program produces an expression tree:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1"></a>mkExpr [] [<span class="dv">1</span>, <span class="dv">9</span>, <span class="dv">10</span>, <span class="dv">3</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">11</span>, <span class="dv">0</span>, <span class="dv">99</span>, <span class="dv">30</span>, <span class="dv">40</span>, <span class="dv">50</span>] <span class="ot">=</span> <span class="dt">Mul</span> (<span class="dt">Add</span> (<span class="dt">Lit</span> <span class="dv">30</span>)</span>
<span id="cb11-2"><a href="#cb11-2"></a>                                                                (<span class="dt">Lit</span> <span class="dv">40</span>))</span>
<span id="cb11-3"><a href="#cb11-3"></a>                                                           (<span class="dt">Lit</span> <span class="dv">50</span>)</span></code></pre></div>
<p>And sure enough, (30 + 40) * 50 = 3500, the expected result.</p>
<p>Reading an expression tree isn’t all that fun though, so I added a pretty-printer that would parenthesis according to operator precedence:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell literate"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1"></a><span class="ot">pretty ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb12-2"><a href="#cb12-2"></a>pretty <span class="ot">=</span> pretty&#39; <span class="dv">0</span></span>
<span id="cb12-3"><a href="#cb12-3"></a>  <span class="kw">where</span></span>
<span id="cb12-4"><a href="#cb12-4"></a>    pretty&#39; p (<span class="dt">Lit</span> n) <span class="ot">=</span> <span class="fu">show</span> n</span>
<span id="cb12-5"><a href="#cb12-5"></a>    pretty&#39; p (<span class="dt">Var</span> n) <span class="ot">=</span> <span class="st">&quot;v&quot;</span> <span class="op">&lt;&gt;</span> <span class="fu">show</span> n</span>
<span id="cb12-6"><a href="#cb12-6"></a>    pretty&#39; p (<span class="dt">Add</span> a b) <span class="ot">=</span> lparen p <span class="dv">1</span> <span class="op">&lt;&gt;</span> pretty&#39; <span class="dv">1</span> a <span class="op">&lt;&gt;</span> <span class="st">&quot; + &quot;</span> <span class="op">&lt;&gt;</span> pretty&#39; <span class="dv">1</span> b <span class="op">&lt;&gt;</span> rparen p <span class="dv">1</span></span>
<span id="cb12-7"><a href="#cb12-7"></a>    pretty&#39; p (<span class="dt">Mul</span> a b) <span class="ot">=</span> lparen p <span class="dv">2</span> <span class="op">&lt;&gt;</span> pretty&#39; <span class="dv">2</span> a <span class="op">&lt;&gt;</span> <span class="st">&quot; * &quot;</span> <span class="op">&lt;&gt;</span> pretty&#39; <span class="dv">2</span> b <span class="op">&lt;&gt;</span> rparen p <span class="dv">2</span></span>
<span id="cb12-8"><a href="#cb12-8"></a>    lparen p q <span class="ot">=</span> <span class="kw">if</span> p <span class="op">&gt;</span> q <span class="kw">then</span> <span class="st">&quot;(&quot;</span> <span class="kw">else</span> <span class="st">&quot;&quot;</span></span>
<span id="cb12-9"><a href="#cb12-9"></a>    rparen p q <span class="ot">=</span> <span class="kw">if</span> p <span class="op">&gt;</span> q <span class="kw">then</span> <span class="st">&quot;)&quot;</span> <span class="kw">else</span> <span class="st">&quot;&quot;</span></span></code></pre></div>
<p>The result is easier to follow, and can be cut and paste into a command line calculator.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1"></a>pretty (<span class="dt">Mul</span> (<span class="dt">Add</span> (<span class="dt">Lit</span> <span class="dv">30</span>) (<span class="dt">Lit</span> <span class="dv">40</span>)) (<span class="dt">Lit</span> <span class="dv">50</span>)) <span class="ot">=</span> (<span class="dv">30</span> <span class="op">+</span> <span class="dv">40</span>) <span class="op">*</span> <span class="dv">50</span></span></code></pre></div>
<p>And if the pretty printer is run on the expression result for the puzzle input with two variables:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1"></a>pretty <span class="op">$</span>  mkExpr [<span class="dv">1</span>,<span class="dv">2</span>] puzzle <span class="op">!!</span> <span class="dv">0</span> <span class="ot">=</span> <span class="dv">5</span> <span class="op">*</span> (<span class="dv">1</span> <span class="op">+</span> (<span class="dv">5</span> <span class="op">*</span> (<span class="dv">3</span> <span class="op">+</span> <span class="dv">5</span> <span class="op">+</span> <span class="dv">2</span> <span class="op">*</span> <span class="dv">3</span> <span class="op">*</span> (<span class="dv">1</span> <span class="op">+</span> <span class="dv">2</span> <span class="op">*</span></span>
<span id="cb14-2"><a href="#cb14-2"></a>        ((<span class="dv">4</span> <span class="op">+</span> <span class="dv">4</span> <span class="op">*</span> (<span class="dv">2</span> <span class="op">*</span> v1 <span class="op">+</span> <span class="dv">1</span>) <span class="op">*</span> <span class="dv">5</span> <span class="op">+</span> <span class="dv">3</span>) <span class="op">*</span> <span class="dv">5</span> <span class="op">+</span> <span class="dv">1</span> <span class="op">+</span> <span class="dv">2</span>))) <span class="op">+</span> <span class="dv">4</span>) <span class="op">*</span> <span class="dv">3</span>) <span class="op">*</span> <span class="dv">2</span> <span class="op">+</span> <span class="dv">1</span> <span class="op">+</span> v2 <span class="op">+</span> <span class="dv">4</span></span></code></pre></div>
<p>The first observation to note about this is that <code>v2</code> is a simple offset, while <code>v1</code> has a multiplier. The equation will be of the form <span class="math inline">\(ax + y + b\)</span>, but first it must be simplified to reduce all those literals down to just <span class="math inline">\(a\)</span> and <span class="math inline">\(b\)</span>.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell literate"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1"></a><span class="ot">simplify ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span></span></code></pre></div>
<p>This is an unremarkable expression simplifier, of the kind you’ll encounter over and over in any introduction to theorem proving, and many introductions to functional programming. The general gist of the addition simplifier is to look for opportunities to convert expressions of the form <code class="sourceCode haskell"><span class="dt">Add</span> (expr (<span class="dt">Lit</span> x)) (<span class="dt">Lit</span> y)</code> (i.e. “(expr + val) + val”) into expressions of the form <code class="sourceCode haskell"><span class="dt">Add</span> expr (<span class="dt">Lit</span> <span class="op">$</span> x <span class="op">+</span> y)</code>, removing one layer of nested addition. To accomplish this, the addition of two literals is immediately collapsed to one literal, any remaining literals on the left are moved to the right, the target sub-addition form is simplified, and any remaining nested literal additions have the literal moved to the outer expression.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell literate"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1"></a>simplify (<span class="dt">Add</span> a b) <span class="ot">=</span> <span class="kw">let</span> a&#39; <span class="ot">=</span> simplify a</span>
<span id="cb16-2"><a href="#cb16-2"></a>                         b&#39; <span class="ot">=</span> simplify b</span>
<span id="cb16-3"><a href="#cb16-3"></a>                      <span class="kw">in</span> <span class="kw">case</span> (a&#39;, b&#39;) <span class="kw">of</span></span>
<span id="cb16-4"><a href="#cb16-4"></a>                            (<span class="dt">Lit</span> x, <span class="dt">Lit</span> y)         <span class="ot">-&gt;</span> <span class="dt">Lit</span> (x <span class="op">+</span> y)</span>
<span id="cb16-5"><a href="#cb16-5"></a>                            (<span class="dt">Lit</span> _, _)             <span class="ot">-&gt;</span> simplify (<span class="dt">Add</span> b&#39; a&#39;)</span>
<span id="cb16-6"><a href="#cb16-6"></a>                            (<span class="dt">Add</span> x (<span class="dt">Lit</span> y), <span class="dt">Lit</span> z) <span class="ot">-&gt;</span> <span class="dt">Add</span> x (<span class="dt">Lit</span> <span class="op">$</span> y <span class="op">+</span> z)</span>
<span id="cb16-7"><a href="#cb16-7"></a>                            (<span class="dt">Add</span> x (<span class="dt">Lit</span> y), z)     <span class="ot">-&gt;</span> <span class="dt">Add</span> (<span class="dt">Add</span> x z) (<span class="dt">Lit</span> y)</span>
<span id="cb16-8"><a href="#cb16-8"></a>                            _                      <span class="ot">-&gt;</span> <span class="dt">Add</span> a&#39; b&#39;</span></code></pre></div>
<p>Multiplication looks for the same nested pattern. In addition, multiplication looks for the opportunity to distribute a literal multiplier into an addition where it can be recursively simplified.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell literate"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1"></a>simplify (<span class="dt">Mul</span> a b) <span class="ot">=</span> <span class="kw">let</span> a&#39; <span class="ot">=</span> simplify a</span>
<span id="cb17-2"><a href="#cb17-2"></a>                         b&#39; <span class="ot">=</span> simplify b</span>
<span id="cb17-3"><a href="#cb17-3"></a>                      <span class="kw">in</span> <span class="kw">case</span> (a&#39;, b&#39;) <span class="kw">of</span></span>
<span id="cb17-4"><a href="#cb17-4"></a>                            (<span class="dt">Lit</span> x, <span class="dt">Lit</span> y)         <span class="ot">-&gt;</span> <span class="dt">Lit</span> (x <span class="op">*</span> y)</span>
<span id="cb17-5"><a href="#cb17-5"></a>                            (<span class="dt">Lit</span> _, _)             <span class="ot">-&gt;</span> simplify (<span class="dt">Mul</span> b&#39; a&#39;)</span>
<span id="cb17-6"><a href="#cb17-6"></a>                            (<span class="dt">Mul</span> x (<span class="dt">Lit</span> y), <span class="dt">Lit</span> z) <span class="ot">-&gt;</span> <span class="dt">Mul</span> x (<span class="dt">Lit</span> <span class="op">$</span> y <span class="op">*</span> z)</span>
<span id="cb17-7"><a href="#cb17-7"></a>                            (<span class="dt">Mul</span> x (<span class="dt">Lit</span> y), z)     <span class="ot">-&gt;</span> <span class="dt">Mul</span> (<span class="dt">Mul</span> x z) (<span class="dt">Lit</span> y)</span>
<span id="cb17-8"><a href="#cb17-8"></a>                            (<span class="dt">Add</span> x y, <span class="dt">Lit</span> _)       <span class="ot">-&gt;</span> <span class="dt">Add</span> (simplify (<span class="dt">Mul</span> x b&#39;))</span>
<span id="cb17-9"><a href="#cb17-9"></a>                                                          (simplify (<span class="dt">Mul</span> y b&#39;))</span>
<span id="cb17-10"><a href="#cb17-10"></a>                            _                        <span class="ot">-&gt;</span> <span class="dt">Mul</span> a&#39; b&#39;</span></code></pre></div>
<p>Anything else is a literal or a variable, and cannot be simplified further.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell literate"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1"></a>simplify cell <span class="ot">=</span> cell</span></code></pre></div>
<p>At this point, it’s a good idea to verify that <code class="sourceCode haskell">simplify</code> works as expected. I threw in the weakest kind of testing possible: check that evaluating my puzzle input when both simplified and unsimplified, using the task one values, produces the same output. This doesn’t check that I’ve simplified all possible expression forms, correctly or otherwise, only those encountered in my input. Ideally, it would use property-based checking to cover a wide range of variable values and programs, but I’m comfortable enough with this minor check on correctness.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell literate"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1"></a><span class="ot">test ::</span> <span class="dt">IO</span> ()</span>
<span id="cb19-2"><a href="#cb19-2"></a>test <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb19-3"><a href="#cb19-3"></a>    <span class="kw">let</span> expr <span class="ot">=</span> mkExpr [<span class="dv">1</span>, <span class="dv">2</span>] puzzle <span class="op">!!</span> <span class="dv">0</span></span>
<span id="cb19-4"><a href="#cb19-4"></a>    <span class="kw">let</span> r1 <span class="ot">=</span> evaluate <span class="op">$</span> subst <span class="dv">2</span> <span class="dv">2</span> <span class="op">$</span> subst <span class="dv">1</span> <span class="dv">12</span> expr</span>
<span id="cb19-5"><a href="#cb19-5"></a>    <span class="kw">let</span> r2 <span class="ot">=</span> evaluate <span class="op">$</span> subst <span class="dv">2</span> <span class="dv">2</span> <span class="op">$</span> subst <span class="dv">1</span> <span class="dv">12</span> <span class="op">$</span> simplify expr</span>
<span id="cb19-6"><a href="#cb19-6"></a>    <span class="fu">print</span> r1</span>
<span id="cb19-7"><a href="#cb19-7"></a>    <span class="fu">print</span> r2</span></code></pre></div>
<p>Let’s take a look at my puzzle’s simplified expression.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1"></a>pretty <span class="op">$</span> simplify <span class="op">$</span> mkExpr [<span class="dv">1</span>,<span class="dv">2</span>] puzzle <span class="op">!!</span> <span class="dv">0</span> <span class="ot">=</span> v1 <span class="op">*</span> <span class="dv">360000</span> <span class="op">+</span> v2 <span class="op">+</span> <span class="dv">250635</span></span></code></pre></div>
<p>This is now of the expected form. Solving this by hand is, of course, trivial, but we’re not here to do things by hand. Except write code, which we’re dong by hand. The last important step is instead to compute the final answer. The expression above must equal <code class="sourceCode haskell"><span class="dv">19690720</span></code> to satisfy the task, giving an equation to solve. Fortunately, it’s a given that there is a unique integer solution, so a solver is trivial. Added literals are subtracted from both sides. Multiplied literals will produce a quotient and a remainder when dividing both sides, so an expression such as <span class="math inline">\(ax + y = b\)</span> means <span class="math inline">\(x\)</span> is the quotient and <span class="math inline">\(y\)</span> is the remainder.</p>
<p>If the simplifier has failed to reduce the expression into one of these forms, the solver will also fail. Which it does not, for my puzzle input.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell literate"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1"></a><span class="ot">solve ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> [(<span class="dt">Int</span>, <span class="dt">Int</span>)]</span>
<span id="cb21-2"><a href="#cb21-2"></a>solve (<span class="dt">Var</span> x) t                 <span class="ot">=</span> [(x, t)]</span>
<span id="cb21-3"><a href="#cb21-3"></a>solve (<span class="dt">Add</span> (<span class="dt">Mul</span> x (<span class="dt">Lit</span> y)) z) t <span class="ot">=</span> <span class="kw">let</span> (x&#39;, z&#39;) <span class="ot">=</span> t <span class="ot">`divMod`</span> y</span>
<span id="cb21-4"><a href="#cb21-4"></a>                                   <span class="kw">in</span> solve x x&#39; <span class="op">&lt;&gt;</span> solve z z&#39;</span>
<span id="cb21-5"><a href="#cb21-5"></a>solve (<span class="dt">Add</span> x (<span class="dt">Lit</span> y)) t         <span class="ot">=</span> solve x (t <span class="op">-</span> y)</span>
<span id="cb21-6"><a href="#cb21-6"></a>solve e t                       <span class="ot">=</span> <span class="fu">error</span> <span class="op">$</span> <span class="fu">show</span> e <span class="op">&lt;&gt;</span> <span class="st">&quot; = &quot;</span> <span class="op">&lt;&gt;</span> <span class="fu">show</span> t</span></code></pre></div>
<p>All that’s left to do is run the whole thing.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell literate"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb22-2"><a href="#cb22-2"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb22-3"><a href="#cb22-3"></a>    <span class="kw">let</span> expr <span class="ot">=</span> simplify <span class="op">$</span> mkExpr [<span class="dv">1</span>, <span class="dv">2</span>] puzzle <span class="op">!!</span> <span class="dv">0</span></span>
<span id="cb22-4"><a href="#cb22-4"></a>    <span class="fu">putStrLn</span> <span class="op">$</span> pretty expr <span class="op">&lt;&gt;</span> <span class="st">&quot; = 19690720&quot;</span></span>
<span id="cb22-5"><a href="#cb22-5"></a>    <span class="kw">let</span> vars <span class="ot">=</span> solve expr <span class="dv">19690720</span></span>
<span id="cb22-6"><a href="#cb22-6"></a>    <span class="fu">maybe</span> (<span class="fu">error</span> <span class="st">&quot;no solution&quot;</span>) <span class="fu">print</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb22-7"><a href="#cb22-7"></a>        noun <span class="ot">&lt;-</span> <span class="fu">lookup</span> <span class="dv">1</span> vars</span>
<span id="cb22-8"><a href="#cb22-8"></a>        verb <span class="ot">&lt;-</span> <span class="fu">lookup</span> <span class="dv">2</span> vars</span>
<span id="cb22-9"><a href="#cb22-9"></a>        <span class="fu">pure</span> (noun <span class="op">*</span> <span class="dv">100</span> <span class="op">+</span> verb)</span></code></pre></div>
<p>Which produces the output:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1"></a>v1 <span class="op">*</span> <span class="dv">360000</span> <span class="op">+</span> v2 <span class="op">+</span> <span class="dv">250635</span> <span class="ot">=</span> <span class="dv">19690720</span></span>
<span id="cb23-2"><a href="#cb23-2"></a><span class="dv">5485</span></span></code></pre></div>
<p>The icon for this post is copyright <a href="https://thenounproject.com/term/advent-calendar/28226/">Claire Jones</a>, used without modification under a Creative Commons license.</p>]]></summary>
</entry>
<entry>
    <title>The TRS-20 - system bus</title>
    <link href="https://bje.id.au/blog/posts/trs20/002-system-bus.html" />
    <id>https://bje.id.au/blog/posts/trs20/002-system-bus.html</id>
    <published>2019-11-23T00:00:00Z</published>
    <updated>2019-11-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This project is influenced by Quinn Dunki’s 6502 homebrew machine <a href="https://blondihacks.com/veronica/">Veronica</a>, and a little by Radical Brad’s 74-series logic based <a href="http://forum.6502.org/viewtopic.php?f=4&amp;t=3329">Vulcan-74</a>. Along with these two are a large number of existing homebrew computer builds, whose details provide me with a wealth of information on design ideas and likely problems I will face. There are even several kits available for order that solve a number of those problems for you.</p>
<p>Nevertheless, I will strike out on my own with a unique design, starting with the system bus.</p>
<!--more-->
<p>This project has no purpose beyond its own journey. I have a computer already, so I don’t need to build one to get any work done. My computer is powerful enough to emulate an 8-bit 2MHz machine a dozen times simultaneously, so I don’t need to build one just to run some old software. Instead, the reason for this project is to connect at a more fundamental level with what a computer is, and how it works. Using a kit doesn’t achieve this - my understanding would remain theoretical, skipping over the hands-on experience of trying to get a bunch of ICs to come together as a working system.</p>
<p>Flimsy justification out of the way, let’s talk system bus design.</p>
<p>My experience with assembling PCs has exposed me to a common design pattern - a motherboard into which expansion cards are slotted. A variation on this pattern is used by the <a href="https://rc2014.co.uk/">RC2014</a> system, by the Veronica, and by the <a href="http://linc.no/products/z50bus/">Z50</a>, amongst others. Rather than a motherboard carrying the CPU and core system components, though, these systems all have an uncomplicated parallel bus backplane board, and the CPU plugs in just like all the peripheral cards. This is a sensible choice, as the bus can be kept stable even if the CPU board iterates - or even changes processor entirely.</p>
<figure>
<img src="/images/rc2014.jpg" alt="" /><figcaption>The <a href="https://rc2014.co.uk/">RC2014</a> design looks neat and works well.</figcaption>
</figure>
<p>The RC2014, the Z50, and the Veronica are all motherboard designs with daughterboards rising vertically. They vary in the connector technology and pin count, but not widely. None of them are very well suited to my constraints on board size and my use of a Z180. 40-pin headers are slightly over 100mm long, exceeding my board budget. Trimming them takes an already heavily constrained signal set (down from 65 exposed on the Z180) and worsens the situation. ISA edge connectors are more suitable and remain a viable option, though 62 contacts means I’d need to skip three CPU signals and have no spare capacity for any other signals.</p>
<p>The winning choice, in the end, comes from a 30 year old standard for embedded systems. <a href="https://pc104.org/">PC/104</a> is a vertical stack of small boards, using board to board connectors to run a bus, and standoffs to provide stability. Each board should be 90.17x95.89mm in size, with a 13mm allowance for I/O connectors at some edges, allowing me to use most of my board budget.</p>
<figure>
<img src="/images/pc104-stack.jpg" alt="" /><figcaption>A little stack of boards makes for an even better homebrew computer.</figcaption>
</figure>
<p>The original PC/104 bus was an ISA 8-bit (PC/XT) bus, with a 32x2 2.54mm pitch header for the board to board connections. This was subsequently updated to add a 20x2 header for a 16-bit ISA (PC/AT) bus. The original ISA bus uses edge connectors, not pin headers. The use of headers reduces the size of the bus connector down to fit on the PC/104 footprint. Subsequent revisions add a 4x30 header to carry a PCI bus, remove the ISA bus, add a PCI Express bus, and finally remove the PCI bus. These various kinds of bus connector are visible in the image above, but I’ll be sticking to the 16-bit ISA connectors - these are the headers included in my first round of parts.</p>
<p>It remains to be see whether I’ll actually use the ISA bus signals as they’re meant to be used. There isn’t exactly a real <a href="https://en.wikipedia.org/wiki/Industry_Standard_Architecture">ISA bus</a> specification, but the book “ISA and EISA: Theory and Operation” is about as close as it gets. There’s a few parts of correct ISA operation that might cause problems for my project. The ISA bus should be clocked at either 8MHz or 8.33MHz, though it’s reasonable to share the CPU clock. The clock isn’t particularly critical though, since the bus is asynchronous, with expected response times for each signal edge. There’s enough in common with the Z80’s system bus that a bridge should be practical to build, but it may have implications for whether I can get zero wait-state memory on the bus. To be determined…</p>
<p>I’m pleased with the notion of the PC/104 form factor. However, if it doesn’t work out as I’d like, I will fall back on more typical edge connectors. Five 2.54mm pitch 72-pin edge connectors is less than $15, and less than 100mm across (89mm for the pins, plus room for the edge of the header). PCI connectors have 120 pins, and at 1.27mm pitch are a comfortable 90mm or so for the whole connector, and cost about the same.</p>
<p>Meanwhile, because I’d like QFP parts to be an option I’ve also spent $5.84 on SMD soldering practice boards. The boards come with two QFP-44 chips each, some SOICs, a handful of resistors from 0402 up to 0805, some SOT23 chips, and some 0606 resistor arrays. Using SMD means more available parts, lower costs, and more effective use of my rather limited board space - but poking things with a hot metal stick might not cut it for much longer.</p>
<table style="width:86%;">
<caption>Project status update</caption>
<colgroup>
<col style="width: 21%" />
<col style="width: 8%" />
<col style="width: 10%" />
<col style="width: 13%" />
<col style="width: 10%" />
<col style="width: 11%" />
<col style="width: 11%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Budget</th>
<th style="text-align: center;">CPU</th>
<th style="text-align: center;">Power</th>
<th style="text-align: center;">Keyboard</th>
<th style="text-align: center;">Video</th>
<th style="text-align: center;">Memory</th>
<th style="text-align: center;">Debug</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">$54.03 of $400</td>
<td style="text-align: center;">█───</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">█───</td>
</tr>
</tbody>
</table>]]></summary>
</entry>
<entry>
    <title>The TRS-20 - a homebrew Z80 machine</title>
    <link href="https://bje.id.au/blog/posts/trs20/001-ideas.html" />
    <id>https://bje.id.au/blog/posts/trs20/001-ideas.html</id>
    <published>2019-11-10T00:00:00Z</published>
    <updated>2019-11-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>My first computer was a TRS-80 Model I, a device that was first sold before I was born. Some time after I was born, I got my hands on one, starting my 30-odd year journey in computing.</p>
<p>For the sake of nostalgia, I’m embarking on a journey to build a homebrew Z80-based machine, loosely based on the TRS-80 Model I. The build will take place in 2020, and so the machine will be called the TRS-20.</p>
<!--more-->
<p>The Model I is not a particularly high bar to reach, these days. It had 4KB of memory, a cassette drive for storage, and a monochrome video display capable of 64 characters over 16 rows - selected to fill exactly 1024 bytes of video memory. In graphics mode, each character cell becomes a 2x3 grid of addressable pixels. My Model I was a low-end model, with no expansions of note. Wikipedia can provide a <a href="https://en.wikipedia.org/wiki/TRS-80">thorough background</a> on the original compter.</p>
<figure>
<img src="/images/trs80-model1.jpg" alt="" /><figcaption>The TRS-80 Model I. Image by <a href="https://www.flickr.com/photos/eevblog/14761087591/">Dave Jones</a>.</figcaption>
</figure>
<p>The basics of my computer are set by my inspiration: I’ll be using a processor from the Z80 family, it will have RAM and ROM occupying the same 64K space, and peripherals will mostly also steal a bit of memory space instead of using the Z80’s (originally absurdly limited) I/O space.</p>
<p>I will use a Z180 processor, most likely the <a href="https://en.wikipedia.org/wiki/Zilog_Z180">Z8S180</a>. This is not perfectly compatible with the original Z80, though I anticipate being able to manage the incompatibilities in the glue logic for the sake of running original TRS-80 software.</p>
<p>I will need to design a series of boards, roughly broken down along these lines:</p>
<ol type="1">
<li>A motherboard or CPU board.</li>
<li>A ROM and RAM board.</li>
<li>An I/O board for USB keyboard input.</li>
<li>A video display board for VGA or HDMI output.</li>
<li>Development and debugging</li>
<li>External storage</li>
</ol>
<p>The constraints on the system are a total budget target of AUD400, the use of the free edition of Eagle PCB software, and only parts I can solder with a reasonable extrapolation of my current abilities. These constraints limit me to a maximum board size of 100x100mm, to through-hole and the larger SMD parts where all solder surfaces are accessible to an iron, and to avoiding the need for costly new tools.</p>
<p>The first round of spending will largely be experimental - DIP adapter boards to try my hand at soldering TSSOP logic chips and TSOP SRAM chips, an STM32F401 to try as a USB Host for keyboard input, and a now quite aged Altera EPM7128S CPLD chip for video signal generation. Adding in a 20x4 character LED board for debug output takes me up to around $50, an eighth of my budget spent without any actual board progress, so I’ll round the spend up to $50 with a cheap Z8018010VSC processor, a 10MHz Z180 in a PLCC68 package, because mounting my CPU in a socket feels like a good plan.</p>
<table>
<caption>Aliexpress offers a fine selection of electronics of dubious origin and veracity.</caption>
<colgroup>
<col style="width: 21%" />
<col style="width: 12%" />
<col style="width: 65%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Item</th>
<th style="text-align: left;">Price</th>
<th style="text-align: left;">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Z8018010SVC</td>
<td style="text-align: left;">$2.46</td>
<td style="text-align: left;">Low-cost PLCC68 Z180 processor for initial prototyping</td>
</tr>
<tr class="even">
<td style="text-align: left;">USB Blaster</td>
<td style="text-align: left;">$4.29</td>
<td style="text-align: left;">Altera CPLD/FPGA programmer</td>
</tr>
<tr class="odd">
<td style="text-align: left;">PLCC sockets</td>
<td style="text-align: left;">$5.51</td>
<td style="text-align: left;">5 each of PLCC68 and PLCC84 through-hole sockets</td>
</tr>
<tr class="even">
<td style="text-align: left;">PLCC IC tool</td>
<td style="text-align: left;">$1.17</td>
<td style="text-align: left;">Tool for yanking PLCC chips out of sockets</td>
</tr>
<tr class="odd">
<td style="text-align: left;">STM32F401</td>
<td style="text-align: left;">$5.00</td>
<td style="text-align: left;">STM32F401CCU6 development board, for USB host trials</td>
</tr>
<tr class="even">
<td style="text-align: left;">20x4 LCD, I²C adapter, acrylic case</td>
<td style="text-align: left;">$9.02</td>
<td style="text-align: left;">Display for debug output</td>
</tr>
<tr class="odd">
<td style="text-align: left;">TSSOP and TSOP adapters</td>
<td style="text-align: left;">$10.38</td>
<td style="text-align: left;">10xTSSOP-24 and 5xTSOP56 adapters for soldering trials</td>
</tr>
<tr class="even">
<td style="text-align: left;">Pin headers</td>
<td style="text-align: left;">$11.19</td>
<td style="text-align: left;">Pin headers, whose purpose is the subject of the next post</td>
</tr>
<tr class="odd">
<td style="text-align: left;">STM32F03, EPM7128S</td>
<td style="text-align: left;">$3.61</td>
<td style="text-align: left;">TSSOP MCU for soldering, PLCC84 CPLD for trials</td>
</tr>
</tbody>
</table>
<p>There was a discount of $4.44 applied this order, bringing the total down to under $50. This order alone doesn’t give me any single workable item: I will see if I can make my cheap STM32F03 (50c!) function as a driver for the debug LCD display, and begin putting together what I’ll need to drive the processor with data lines tied to run a NOP through the address space. With 30 to 50 days delivery on most of the above, I’ve now got plenty of lead time to prepare.</p>
<p>Below is my project status update table. Each component gains a bar of progress meter for having a rough design, a proof of concept, a completed design, all parts ready, and a working board. Components may backslide if the produced board has enough flaws to send me back to the design or experimental stage. I am using box drawing characters in preparation for my return the glory that is a TRS-80’s graphics system.</p>
<table style="width:86%;">
<caption>Project status update</caption>
<colgroup>
<col style="width: 21%" />
<col style="width: 8%" />
<col style="width: 10%" />
<col style="width: 13%" />
<col style="width: 10%" />
<col style="width: 11%" />
<col style="width: 11%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Budget</th>
<th style="text-align: center;">CPU</th>
<th style="text-align: center;">Power</th>
<th style="text-align: center;">Keyboard</th>
<th style="text-align: center;">Video</th>
<th style="text-align: center;">Memory</th>
<th style="text-align: center;">Debug</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">$48.19 of $400</td>
<td style="text-align: center;">█───</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">────</td>
<td style="text-align: center;">█───</td>
</tr>
</tbody>
</table>]]></summary>
</entry>
<entry>
    <title>Bluetooth Arcade Joystick</title>
    <link href="https://bje.id.au/blog/posts/2019-07-05-ble-joystick.html" />
    <id>https://bje.id.au/blog/posts/2019-07-05-ble-joystick.html</id>
    <published>2019-07-05T00:00:00Z</published>
    <updated>2019-07-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>A <a href="https://retropie.org.uk/">RetroPie</a> is a lot of fun, but quite a few of the games one might want to play really need a classic arcade joystick. And that joystick needs to be usable from the comfort of the recliner, which is definitely not in USB cable range of the TV. The solution is obvious: build a bluetooth joystick controller.</p>
<!--more-->
<p>To build this, we’ll need the software to drive it, and the hardware to run it on. The basic design is to use an ESP32 dev board, which exposes enough GPIO pins to support a 4-way joystick and 8 buttons, and a li-po battery to keep the thing running.</p>
<p>The software first requires an understanding of the communication mechanism to be used - bluetooth low energy, which not only has the possibility of consuming lower power than bluetooth classic (AFAIK on an ESP32 it currently does not) but also has very low latency (and on an ESP32, this is definitely true). This is essential for having a good gaming experience.</p>
<h2 id="bluetooth-low-energy">Bluetooth Low Energy</h2>
<p>BLE operates in a client-server model, where the peripheral provide services to a central client device. The ESP-IDF framework provides BLE support via Bluedroid, but documentation is a little sparse. Even more annoying, the Bluetooth SIG reworked their website and broke huge numbers of deep links at some point in the relatively recent past, so many articles include broken links. This one will not link directly to the BT SIG for this reason.</p>
<p>Creating a Bluetooth Low Energy joystick means understanding an entire stack of acronyms. The device appears as a Human Interface Device (HID), which is the same meaning as for USB devices. This is layered into the Generic Attribute Profile (GATT) of BLE. GATT operates alongside the Generic Access Profile (GAP), which manages connections and advertisements.</p>
<p>A GATT application profile is a sequence of services, where each service is a sequence of characteristics. There are predefined services available, including the HID service (16-bit UUID 0x1812), the battery service (0x180f), and the device information service (0x180a). A HID device should provide all three of these services.</p>
<p>The Battery Service has a single characteristic for reporting the current battery level. An XML description of the service can be found via Google; it’s published by the BT SIG at unstable URLs.</p>
<p>The key documents to obtain from the BT SIG are the HID over GATT profile (HOGP), the core Bluetooth specification 4.2 or later, and the supplement to the core specification (the CSS document), version 8 or later. The HOGP spec needs the most attention, while the other two mostly have tables and definitions to refer to.</p>
<h2 id="ble-on-esp32-with-bluedroid">BLE on ESP32 with Bluedroid</h2>
<p>The library is driven by callbacks with event codes. Setup of a BLE server happens in stages as various events are triggered, which is sort of documented in the <a href="https://github.com/espressif/esp-idf/blob/master/examples/bluetooth/bluedroid/ble/gatt_server/tutorial/Gatt_Server_Example_Walkthrough.md">walkthroughs</a>. The primary sequence is:</p>
<ol type="1">
<li><p>Set up the Bluetooth stack.</p>
<p>This process involves enabling NVRAM, initialising and enabling the BT controller, initialising and enabling the Bluedroid application stack, registering callbacks for GAP and GATTS events, and finally registering an application. This application registration triggers our first event, <code>ESP_GATTS_REG_EVT</code>.</p></li>
<li><p>Construct advertising data and begin advertising.</p>
<p>The application registration event triggers a callback in the GATTS portion of the stack. At this point, the GAP parameters for the device should be configured: device name, appearance, advertising and scan response data. Each of advertising and scan response data is capped at 31 bytes, so using the additional 31 bytes of a scan response may be necessary for larger advertisements. An event is triggered when each has completed successfully, the <code>ESP_GAP_BLE_ADV_DATA_SET_COMPLETE_EVT</code> and the <code>ESP_GAP_BLE_SCAN_RSP_DATA_SET_COMPLETE_EVT</code> events. When both events have fired, advertising may be started, which will in turn trigger an <code>ESP_GAP_BLE_ADV_START_COMPLETE_EVT</code> event.</p>
<p>The Bluedroid stack will take care of packing advertising data into advertising and scan response data packets. The order in which it writes data is flags, appearance, device name, manufacturer data, TX power, 16-bit UUIDs, 32-bit UUIDs, 128-bit UUIDs, service solicitation UUIDs, and finally service data. Most of these items are not particularly important for a joystick device: appearance, device name, and 16-bit UUIDs are the most valuable. The TX power is flagged “TODO” in the version of the library I have, so there’s no point worrying about that one. The stack will also take care of translating 128-bit UUIDs to the right format based on their value.</p>
<p>After setting up and starting advertisements, the device will be visible to BT hosts, but it will not respond to connection requests yet.</p></li>
<li><p>Define services and characteristics.</p>
<p>An application in BLE consists of a sequence of services, each of which is a sequence of characteristics. Each characteristic is a declaration, a value, and a possibly empty set of descriptors. All of these things are defined using GATT attributes. For example, a partial HID service declaration would consist of these ordered attributes:</p>
<ul>
<li>A Service Declaration attribute for the HID Service UUID</li>
<li>A Characteristic Declaration attribute for a read/notify value</li>
<li>A HID Report attribute containing the value itself</li>
<li>A Client Characteristic Configuration (CCC) Descriptor attribute</li>
<li>A Report Reference Descriptor attribute</li>
</ul>
<p>This partial declaration only has a single characteristic; a full HID service must have a Report Map, at least one Report, and a HID Information characteristic, and may have further Reports, a Control Point, and for keyboards and mice, a Protocol Mode value and Boot Report(s), used for a host that’s booting up and can’t use the full HID spec.</p>
<p>Bluedroid allows these to be created one by one, or defined in a table and created in one shot. The latter is much simpler: create the service in one call, and in the ensuing callback start the service. The stack can also take care of responding to read and write requests for you.</p>
<p>For the HID profile, the CCC allows the client to inform the server whether it wants notifications enabled or not, and the Report Reference indicates the type(s) (Input, Output, or Feature) and identifiers of the Report.</p>
<p>Alongside the HID Service itself, a HID Device must also implement the Battery Service and Device Information Service.</p></li>
<li><p>Security, security, security, security.</p>
<p>The HID profile requires a secured connection. This involves bonding - a long-term exchange of keys that the server and client will use for future connections. As the gamepad has no output controls and only limited input controls, it’s easiest to use a no-PIN bonding mechanism. We’re not too worried about the security of a game controller, so there’s little reason to require anything beyond a confirmation box on the host device.</p>
<p>Bluedroid in ESP-IDF requires that at least two security parameters are set: <code>ESP_BLE_SM_AUTHEN_REQ_MODE</code>, set to <code>ESP_LE_AUTH_REQ_SC_BOND</code> to require bonding,</p></li>
<li><p>HID profile conformance details.</p>
<p>The HID profile has some additional requirements and recommendations to follow regarding advertising, connecting to non-bonded and bonded hosts, and reconnections. I glossed over most of this, which likely will cause problems down the line.</p></li>
</ol>
<p>With all of this sorted out, the joystick pairs and bonds.</p>
<p>The remaining code is trivial: interrupts on any of the input pins (rising or falling edges) cause all pins to be read and a BLE notification message to be sent. The delay on this appears to be singificantly smaller than the delay caused by my aging reflexes - the ESP32 is a reasonably fast chip, there’s next to nothing executing on it, and the BLE transport sends tiny packets very quickly.</p>
<h2 id="construction">Construction</h2>
<p>I’ve provided supplier links to most parts, but everything’s pretty generic here, so find your own options as you please. Some parts I had hanging around, so not everything has a link, but nothing is hard to find. Construction is easy, most of the work in this project was in the software.</p>
<p><strong>Bill of Materials</strong></p>
<ol type="1">
<li>A zero-delay USB <a href="https://www.aliexpress.com/item/1886491368.html">joystick kit</a></li>
<li>An acrylic <a href="https://www.aliexpress.com/item/32947858378.html">case</a> - I chose a clear case to expose the guts with pride</li>
<li>An ESP32 dev board (DOIT devkit v1, 36-pin variant; most boards will work)</li>
<li>A li-po <a href="https://www.aliexpress.com/item/32926131874.html">battery module</a> for an 18650 battery</li>
<li>A <a href="https://www.jaycar.com.au/spdt-sub-miniature-toggle-switch-solder-tag/p/ST0300">toggle switch</a> for power control</li>
<li>A set of XHP <a href="https://www.aliexpress.com/item/32681086028.html">connectors</a> in 2, 3, and 4 pin configurations</li>
<li>A perfboard large enough to hold the connectors and dev board</li>
<li>A 40-pin female header strip</li>
</ol>
<p>The joystick kit includes a 4-way joystick, 8x 30mm buttons, 2x 22mm buttons, cables with XHP plugs, and a zero-delay USB encoder board that we will not use. The case only has 6x 30mm holes and 2x22mm holes, so two buttons are also unused. The particular combination I wound up with didn’t quite work perfectly - the buttons are push-through and should snap into place, but the lid of the case is a little too thick for them to snap in. Screw type buttons would be a better choice with this case.</p>
<p>The 40-pin header can be cut in half (pull out a sacrificial pin and cut in the hole it left, don’t try and cut between two pins) and trimmed to get two 18-pin headers to hold the ESP32 module; this means any mistakes don’t cost me a whole module, and a subsequent improved version is possible as well.</p>
<p>Onto the perfboard I soldered the headers, 8 2-pin connectors for the buttons, and a 5-pin male header for the joystick. I didn’t have a 5-pin XHP socket in my kit, alas. When laying this part out, pay attention to where the board will sit in the case and how far the cables can reach - I soldered in one header for the joystick before verifying that the cable could reach that location, and needed to add a second header on the other end of the board.</p>
<p>Another pair of headers for a power cable, with the high side line passing through the toggle switch (drill a small hole in the rear of the case to mount the switch), jumper wires as appropriate, and everything’s ready to go.</p>
<h2 id="closing-remarks">Closing remarks</h2>
<p>This was a fun project - it didn’t stress my mediocre hardware abilities, I learned a lot about bluetooth, I applied material on FreeRTOS I’d learned recently while completing a Master’s degree by coursework, and the thing <em>works</em> !</p>
<p>There’s a few things that aren’t quite right on the build. The screws that hold the case together come loose very easily as the case rattles around during play, and the joystick’s knob also loosens over time - a bit plumber’s tape or a spring washer will likely fix these problems. I have to open up the case to recharge the battery, for which I have a Micro-USB panel mount part on order - wiring the power lines to the charger and the data lines to the ESP32 should do the trick, though this means I’ll want to run power in via the USB port at all times instead of trying to switch from 3V in to 5V via the on-board regulator.</p>
<p>The main problem with the whole setup though is that the particular battery board I’m using doesn’t have any charge measurement capabilities. This means I run blind on how long I can expect the battery to last. It’s got a decent operational lifetime, I haven’t run it down enough to see if the board safely shuts off when the battery gets low but I have played for 4+hrs in a sitting without it flaking out - so it’s good enough for my purposes. A further revision would definitely change the battery board out for something that can measure charge too.</p>
<p>Extra buttons or an 8-way joystick could be nice, but would require a shift register. If I go down this route I’ll probably design a PCB, and maybe see about bringing the battery charger on-board. At this point, it’d also be nice to implement a soft-touch power switch and allow the ESP32 to shut itself down if the device is left idle.</p>]]></summary>
</entry>
<entry>
    <title>Z specification with Atom</title>
    <link href="https://bje.id.au/blog/posts/2016-04-12-atom-z-notation.html" />
    <id>https://bje.id.au/blog/posts/2016-04-12-atom-z-notation.html</id>
    <published>2016-04-12T00:00:00Z</published>
    <updated>2016-04-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Z notation is a formal specification language based on typed set theory and predicate logic. With this relatively simple mathematical grounding, Z is a useful pedagogic introduction to formal methods, and a useful formal method to apply when consumers of the output aren’t already trained for it.</p>
<p>However, the development of Z mostly involves tools which are rather dated. This article shows how to use Atom as a modern Z authoring studio, for small to medium specifications.</p>
<!--more-->
<p><img src="/images/linter-czt.png" /></p>
<h2 id="essential-ingredients-latex">Essential ingredients: LaTeX</h2>
<p>Z notation is primarily authored in LaTeX, so the first step is writing effective LaTeX in Atom.</p>
<p>There are two approaches to this. One is to use Markdown for prose, and embed LaTeX directly, using [Pandoc] to produce PDF output. The downside of this is that Pandoc has no straightforward way to require a LaTeX package, and so including <code>oz.sty</code> or an equivalent means writing a custom preamble.</p>
<p>The second approach is the one I favour: write in LaTeX, use the <a href="https://atom.io/packages/latextools">latextools</a> package to build PDF output, and use the <a href="https://atom.io/packages/pdf-view">pdf-view</a> package to preview the PDF in a side-by-side panel.</p>
<h2 id="essential-ingredients-type-checking">Essential ingredients: type checking</h2>
<p>Z notation is machine checkable; the syntax and types can be verified automatically. However, <a href="https://en.wikipedia.org/wiki/Z_notation#Tools">the tools</a> to do this aren’t always kept up to date: the most current is <a href="https://sourceforge.net/projects/czt/">CZT</a>, the Community Z Tools, many others are either now broken links, or ten years out of date.</p>
<p>Using CZT isn’t a great experience, particularly for beginners. It offers an Eclipse-based IDE, with a project concept and file naming requirements in conflict with LaTeX naming requirements.</p>
<p>CZT also offers a command line typechecker, and so I created an Atom package, <a href="https://atom.io/packages/linter-czt">linter-czt</a>, to invoke that typechecker as a service provider for the <a href="https://atom.io/packages/linter">linter</a> package.</p>
<h2 id="usage-of-linter-czt">Usage of linter-czt</h2>
<p>Because it’s not a good idea to typecheck all LaTeX files, the CZT linter package introduces a new grammar for Z specifications, with scope <code>text.tex.latex.zed</code>. You can either select the <code>LaTeX Z</code> grammar from the grammar selection list (click on <code>LaTeX</code> in the status bar for a .tex file), follow the CZT approach and name your file with a <code>.zed</code> notation, or put <code>% !Z-notation</code> as the first line in your file.</p>
<p>Interpreting messages is not made any easier by the wrapper of a modern editor over a dated typechecker, so there’s no substitute for experience and understanding when it comes to writing meaningful Z.</p>
<p>The CZT distribution requires a Java 8 runtime, and a binary is included in the Atom package, with a patch to provide better location information applied.</p>
<p>Install all packages using either <code>apm</code> or the GUI settings install tab.</p>]]></summary>
</entry>
<entry>
    <title>Church encoding of a monoid</title>
    <link href="https://bje.id.au/blog/posts/2016-02-03-church-monoid.html" />
    <id>https://bje.id.au/blog/posts/2016-02-03-church-monoid.html</id>
    <published>2016-02-03T00:00:00Z</published>
    <updated>2016-02-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This article shows how a Church encoding can be derivied from an abstract data type, and intuitively but not rigorously demonstrates their equivalence.</p>
<!--more-->
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1"></a><span class="ot">{-# LANGUAGE GADTs, RankNTypes #-}</span></span></code></pre></div>
<p>We start out by defining a sum type for a monoid, with empty, embed, and append operations. To ease the transformation to Church encoding, we use <code>GADTs</code> to give explicit type signatures to the three constructors.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">data</span> <span class="dt">MonoidAST</span> a <span class="kw">where</span></span>
<span id="cb2-2"><a href="#cb2-2"></a>    <span class="dt">MEmbed</span><span class="ot"> ::</span> a <span class="ot">-&gt;</span> <span class="dt">MonoidAST</span> a</span>
<span id="cb2-3"><a href="#cb2-3"></a>    <span class="dt">MEmpty</span><span class="ot"> ::</span> <span class="dt">MonoidAST</span> a</span>
<span id="cb2-4"><a href="#cb2-4"></a>    <span class="dt">MAppend</span><span class="ot"> ::</span> <span class="dt">MonoidAST</span> a <span class="ot">-&gt;</span> <span class="dt">MonoidAST</span> a <span class="ot">-&gt;</span> <span class="dt">MonoidAST</span> a</span></code></pre></div>
<p>A Church encoding represents the interpretation of a data structure; for each construction in the type, the Church encoding will require a function to interpret that construction. Thus, the Church encoding of the above structure can be obtained by replacing <code>MonoidAST a</code> with a type variable <span class="math inline">\(r\)</span>, and describing a function which takes one function for each of the ADT constructors, finally returning an <span class="math inline">\(r\)</span> :</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">newtype</span> <span class="dt">CEMonoid</span> a <span class="ot">=</span> <span class="dt">CEMonoid</span> {<span class="ot"> mrun ::</span></span>
<span id="cb3-2"><a href="#cb3-2"></a>    <span class="kw">forall</span> r<span class="op">.</span>        <span class="co">-- ≡ MonoidAST</span></span>
<span id="cb3-3"><a href="#cb3-3"></a>    (a <span class="ot">-&gt;</span> r)         <span class="co">-- ≡ MEmbed</span></span>
<span id="cb3-4"><a href="#cb3-4"></a>    <span class="ot">-&gt;</span> r             <span class="co">-- ≡ MEmpty</span></span>
<span id="cb3-5"><a href="#cb3-5"></a>    <span class="ot">-&gt;</span> (r <span class="ot">-&gt;</span> r <span class="ot">-&gt;</span> r) <span class="co">-- ≡ MAppend</span></span>
<span id="cb3-6"><a href="#cb3-6"></a>    <span class="ot">-&gt;</span> r }</span></code></pre></div>
<p>The <code>mrun</code> function will take a Church encoded monoid and the functions for each interpretation, and produce a monoidal value. If we consider <code>CEMonoid  Int</code>, we might wish to take the sum monoid (<code>mrun _ id 0 (+)</code>) or the product monoid (<code>mrun _ id 1 (*)</code>). Of special note here is that <span class="math inline">\(a\)</span> and <span class="math inline">\(r\)</span> are not necessarily the same type. We could execute a monoid which first transforms the integer value to something else, such as <code>mrun _ show "" (++)</code>.</p>
<p>Now we have a way to execute a monoid, but not to construct one. We provide functions for constructors, effectively taking the lower-case of the ADT’s constructors:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a>membed&#39; a <span class="ot">=</span> <span class="dt">CEMonoid</span> <span class="op">$</span> \ d _ _ <span class="ot">-&gt;</span> d a</span>
<span id="cb4-2"><a href="#cb4-2"></a>mempty&#39; <span class="ot">=</span> <span class="dt">CEMonoid</span> <span class="op">$</span> \ _ e _ <span class="ot">-&gt;</span> e</span>
<span id="cb4-3"><a href="#cb4-3"></a>mappend&#39; a b <span class="ot">=</span> <span class="dt">CEMonoid</span> <span class="op">$</span> \ d e f <span class="ot">-&gt;</span> f (mrun a d e f) (mrun b d e f)</span></code></pre></div>
<p>To demonstrate the equivalence of these constructors to the ADT’s value constructors, we can inspect the types of the functions and observe their similarity to the ADT:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="op">:</span>t mempty&#39;</span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="op">:</span>t membed&#39;</span>
<span id="cb5-3"><a href="#cb5-3"></a><span class="op">:</span>t mappend&#39;</span></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<p><span class="get-type">mempty’ :: forall a. CEMonoid a</span></p>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<p><span class="get-type">membed’ :: forall a. a -&gt; CEMonoid a</span></p>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<p><span class="get-type">mappend’ :: forall a. CEMonoid a -&gt; CEMonoid a -&gt; CEMonoid a</span></p>
<p>Now we have all the elements in place to create and run a few monoids:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">let</span> mon <span class="ot">=</span> membed&#39; <span class="dv">5</span> <span class="ot">`mappend&#39;`</span> membed&#39; <span class="dv">3</span> <span class="kw">in</span></span>
<span id="cb6-2"><a href="#cb6-2"></a>    (mrun mon <span class="fu">id</span> <span class="dv">0</span> (<span class="op">+</span>), mrun mon <span class="fu">id</span> <span class="dv">1</span> (<span class="op">*</span>), mrun mon <span class="fu">show</span> <span class="st">&quot;&quot;</span> (<span class="op">++</span>))</span></code></pre></div>
<pre><code>(8,15,&quot;53&quot;)</code></pre>
<p>When transforming to the Church encoding, at the type level we exchanged a definition of how to construct the type for a definition of how to interpret the type, and needed to provide functions to construct values in the type.</p>
<p>Conversely, the ADT describes at the type level how to construct values, and so needs a function to interpret those values:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1"></a>runM <span class="dt">MEmpty</span> d e f <span class="ot">=</span> e</span>
<span id="cb8-2"><a href="#cb8-2"></a>runM (<span class="dt">MEmbed</span> a) d e f <span class="ot">=</span> d a</span>
<span id="cb8-3"><a href="#cb8-3"></a>runM (<span class="dt">MAppend</span> a b) d e f <span class="ot">=</span> f (runM a d e f) (runM b d e f)</span>
<span id="cb8-4"><a href="#cb8-4"></a><span class="op">:</span>t runM</span>
<span id="cb8-5"><a href="#cb8-5"></a><span class="kw">let</span> mon <span class="ot">=</span> <span class="dt">MEmbed</span> <span class="dv">3</span> <span class="ot">`MAppend`</span> <span class="dt">MEmbed</span> <span class="dv">5</span> <span class="kw">in</span></span>
<span id="cb8-6"><a href="#cb8-6"></a>    (runM mon <span class="fu">id</span> <span class="dv">0</span> (<span class="op">+</span>), runM mon <span class="fu">id</span> <span class="dv">1</span> (<span class="op">*</span>), runM mon <span class="fu">show</span> <span class="st">&quot;&quot;</span> (<span class="op">++</span>))</span></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning { 
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error { 
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<p><span class="get-type">runM :: forall t t1. MonoidAST t -&gt; (t -&gt; t1) -&gt; t1 -&gt; (t1 -&gt; t1 -&gt; t1) -&gt; t1</span></p>
<pre><code>(8,15,&quot;35&quot;)</code></pre>]]></summary>
</entry>
<entry>
    <title>Developing Haskell using Atom</title>
    <link href="https://bje.id.au/blog/posts/2015-10-06-atom-haskell-dev.html" />
    <id>https://bje.id.au/blog/posts/2015-10-06-atom-haskell-dev.html</id>
    <published>2015-10-06T00:00:00Z</published>
    <updated>2015-10-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I’m picking up pace on Haskell development, with useless early versions of two packages now on github:</p>
<ul>
<li><a href="https://github.com/codebje/hakyll-site/">hakyll-site</a> - a bare-bones static site generator using Hakyll</li>
<li><a href="https://github.com/codebje/hask-mrt/">hask-mrt</a> - A parser for multi-router toolkit (MRT) export files</li>
</ul>
<p>This article outlines the tool chain I’m now using to do this development.</p>
<!--more-->
<h2 id="building-code">Building code</h2>
<p>You can start to get a sense of how I do this by looking at those two repositories, where right off the bat you’ll see that I’m using <a href="https://www.stackage.org/">stack</a> for building, and where possible using <a href="https://travis-ci.org/codebje/">Travis CI</a> to test my builds.</p>
<p>Using stack frees me from the cabal sandbox concerns of whether the environment is applied appropriately, particularly for tools invoked other than directly from a shell prompt where I need to take care to ensure the path is right. It also gives me the stable set of packages, but this isn’t the full Hackage, and already I’ve noticed a few packages missing.</p>
<p>The blog itself is run using a trio of Docker containers: an nginx server to spit out the content, a builder image which pulls the latest git version, rebuilds the site executable as necessary, rebuilds the site itself, and copies it into place, on the third image, a data container. A git <code>post-receive</code> hook triggers the site rebuild container, so blog updates are always just one push away.</p>
<h2 id="writing-code">Writing code</h2>
<p>The major change for me, though, is that I’m using <a href="https://atom.io/">Atom</a> as my editor. I’ve been a <a href="http://www.vim.org/">vim</a> user for a few decades now, and while developing Haskell code in vim works well enough that I’m comfortable doing it via ssh, a number of Atom packages make development just that little bit nicer.</p>
<p>First, I often use some Markdown somewhere, and as <code>hakyll-site</code> might suggest, I also often wind up generating web sites. Atom has excellent support for HTML, CSS, less, JavaScript, and with the <a href="https://atom.io/packages/markdown-preview-plus">markdown-preview-plus</a> package, <a href="http://pandoc.org/">pandoc</a> Markdown support including LaTeX math.</p>
<p>Second, I rely heavily on <a href="https://hackage.haskell.org/package/hlint">hlint</a> to make me a better Haskell developer, and too much time developing Java has made me fond of autocompletion. To satisfy these needs, and the additional bonus of showing expression types on mouse hover (mitigating my most common use of the REPL: type composition), <a href="https://atom.io/packages/ide-haskell">ide-haskell</a> and its supporting packages really shines.</p>
<h2 id="making-it-work">Making it work</h2>
<p>To make ide-haskell work well, you need to install <a href="https://hackage.haskell.org/package/ghc-mod">ghc-mod</a>, and to work with stack that means version 5.4.0.0. I installed using the Mac homebrew version of Cabal, and given stack tends to prefer my system GHC over installing its own copy, this leaves me with an appropriately linked set of tools. I also installed <a href="https://hackage.haskell.org/package/stylish-haskell">stylish-haskell</a> to clean up my indenting and import lists via the IDE.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1"></a>$ <span class="ex">stack</span> install ghc-mod</span>
<span id="cb1-2"><a href="#cb1-2"></a>… <span class="bu">time</span> passes …</span>
<span id="cb1-3"><a href="#cb1-3"></a>$ <span class="ex">stack</span> install stylish-haskell</span>
<span id="cb1-4"><a href="#cb1-4"></a>… <span class="ex">much</span> more time passes …</span></code></pre></div>
<p>The full set of packages I’m currently making use of are:</p>
<dl>
<dt><a href="https://github.com/atom-haskell/autocomplete-haskell">autocomplete-haskell</a></dt>
<dd>Auto-completion tied to ghc-mod, so it actually knows my code
</dd>
<dt><a href="https://atom.io/packages/haskell-ghc-mod">haskell-ghc-mod</a></dt>
<dd>The autocompletion and ide backend provider. Configuration is mostly about managing paths correctly, now that both this package and ghc-mod fully support stack projects.
</dd>
<dt><a href="https://atom.io/packages/ide-haskell">ide-haskell</a></dt>
<dd>Errors, warnings, lints, hover-over type information, and code clean-up. The linting, in particular, is a real winner.
</dd>
<dt><a href="https://atom.io/packages/language-haskell">language-haskell</a></dt>
<dd>Syntax highlighting for Haskell and cabal files. A requirement for most of the other packages, too.
</dd>
<dt><a href="https://atom.io/packages/markdown-preview-plus">markdown-preview-plus</a></dt>
<dd>The thing that’s showing me my typos in real-time as I make them working on this article. Regrettably, there is no linter available for writing style.
</dd>
<dt><a href="https://atom.io/packages/hard-wrap">hard-wrap</a></dt>
<dd>On demand word-wrap for text or Markdown files. I’m not big on soft wrap, and hard-wrap does the job perfectly for me.
</dd>
</dl>
<p>Configuration overall is pretty straightforward. Atom ties into git flawlessly, to the point that issuing a <code>git mv</code> from a shell results in Atom’s editor pane reflecting the new file name, without losing my cursor position in any open files.</p>
<h2 id="being-productive">Being productive</h2>
<p>My <a href="https://github.com/codebje/vimrc/">vim setup</a> is reasonably complex, and my familiarity with the modal editing gives me plenty of technical efficiency for making changes. But when I write code, I don’t really need technical efficiency so much as I need cognitive efficiency - linting, type checking, quick access to docs, and of course REPL behaviours tend to weigh much more than how rapidly I can indent 20 lines. Atom gives me that cognitive assistance for a wide range of tasks, in one place.</p>
<p>My current project at work involves prototyping a user interface for a new system, and this means some Haskell to generate a static site, some Markdown for the straight up descriptive text, some HTML for the interface prototypes, and a lot of SVG for the shiny new bits. Atom’s made all of that pretty much seamless, with the one minor down side that so far I don’t have a great setup for previewing SVG as I edit it - which is potentially a new project to embark on.</p>
<p>Oh, <a href="https://atom.io/packages/svg-preview">never mind</a>. Time to install a new package.</p>]]></summary>
</entry>

</feed>
